#line 2 "sqlparser_lex.cpp"

#line 4 "sqlparser_lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef yyconst struct yy_trans_info *yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyg->yytext_ptr -= yyg->yy_more_len; \
	yyleng = (size_t) (yy_cp - yyg->yytext_ptr); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 55
#define YY_END_OF_BUFFER 56
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[6922] =
    {
 {   0,   0 }, {   0,6666 }, {   0,   0 }, {   0,6664 }, {   1,2064 },
 {   2,2064 }, {   3,2064 }, {   4,2064 }, {   5,2064 }, {   6,2064 },
 {   7,2064 }, {   8,2064 }, {   9,2066 }, {  10,2071 }, {  11,2066 },
 {  12,2066 }, {  13,2066 }, {  14,2064 }, {  15,2064 }, {  16,2064 },
 {  17,2064 }, {  18,2064 }, {  19,2064 }, {  20,2064 }, {  21,2064 },
 {  22,2064 }, {  23,2064 }, {  24,2064 }, {  25,2064 }, {  26,2064 },
 {  27,2064 }, {  28,2064 }, {  29,2064 }, {  30,2064 }, {  31,2064 },
 {  32,2066 }, {  33,2068 }, {  34,2073 }, {  35,2100 }, {  36,2100 },
 {  37,2064 }, {  38,2086 }, {  39,2073 }, {  40,2088 }, {  41,2090 },
 {  42,2092 }, {  43,2192 }, {  44,2094 }, {  45,2224 }, {  46,2234 },

 {  47,2096 }, {  48,2251 }, {  49,2251 }, {  50,2251 }, {  51,2251 },
 {  52,2251 }, {  53,2251 }, {  54,2251 }, {  55,2251 }, {  56,2251 },
 {  57,2251 }, {  58,2102 }, {  59,2105 }, {  60,2231 }, {  61,2236 },
 {  62,2253 }, {  63,2064 }, {  64,2100 }, {  65,2100 }, {  66,2100 },
 {  67,2100 }, {  68,2100 }, {  69,2100 }, {  70,2100 }, {  71,2100 },
 {  72,2100 }, {  73,2100 }, {  74,2100 }, {  75,2100 }, {  76,2100 },
 {  77,2100 }, {  78,2100 }, {  79,2100 }, {  80,2100 }, {  81,2100 },
 {  82,2100 }, {  83,2100 }, {  84,2100 }, {  85,2100 }, {  86,2100 },
 {  87,2100 }, {  88,2100 }, {  89,2100 }, {  90,2100 }, {  91,2064 },
 {  92,2064 }, {  93,2064 }, {  94,2255 }, {  95,2100 }, {  96,2073 },

 {  97,2100 }, {  98,2100 }, {  99,2100 }, { 100,2100 }, { 101,2100 },
 { 102,2100 }, { 103,2100 }, { 104,2100 }, { 105,2100 }, { 106,2100 },
 { 107,2100 }, { 108,2100 }, { 109,2100 }, { 110,2100 }, { 111,2100 },
 { 112,2100 }, { 113,2100 }, { 114,2100 }, { 115,2100 }, { 116,2100 },
 { 117,2100 }, { 118,2100 }, { 119,2100 }, { 120,2100 }, { 121,2100 },
 { 122,2100 }, { 123,2064 }, { 124,2257 }, { 125,2064 }, { 126,2267 },
 { 127,2064 }, { 128,2064 }, { 129,2064 }, { 130,2064 }, { 131,2064 },
 { 132,2064 }, { 133,2064 }, { 134,2064 }, { 135,2064 }, { 136,2064 },
 { 137,2064 }, { 138,2064 }, { 139,2064 }, { 140,2064 }, { 141,2064 },
 { 142,2064 }, { 143,2064 }, { 144,2064 }, { 145,2064 }, { 146,2064 },

 { 147,2064 }, { 148,2064 }, { 149,2064 }, { 150,2064 }, { 151,2064 },
 { 152,2064 }, { 153,2064 }, { 154,2064 }, { 155,2064 }, { 156,2064 },
 { 157,2064 }, { 158,2064 }, { 159,2064 }, { 160,2064 }, { 161,2064 },
 { 162,2064 }, { 163,2064 }, { 164,2064 }, { 165,2064 }, { 166,2064 },
 { 167,2064 }, { 168,2064 }, { 169,2064 }, { 170,2064 }, { 171,2064 },
 { 172,2064 }, { 173,2064 }, { 174,2064 }, { 175,2064 }, { 176,2064 },
 { 177,2064 }, { 178,2064 }, { 179,2064 }, { 180,2064 }, { 181,2064 },
 { 182,2064 }, { 183,2064 }, { 184,2064 }, { 185,2064 }, { 186,2064 },
 { 187,2064 }, { 188,2064 }, { 189,2064 }, { 190,2064 }, { 191,2064 },
 { 192,2064 }, { 193,2064 }, { 194,2064 }, { 195,2064 }, { 196,2064 },

 { 197,2064 }, { 198,2064 }, { 199,2064 }, { 200,2064 }, { 201,2064 },
 { 202,2064 }, { 203,2064 }, { 204,2064 }, { 205,2064 }, { 206,2064 },
 { 207,2064 }, { 208,2064 }, { 209,2064 }, { 210,2064 }, { 211,2064 },
 { 212,2064 }, { 213,2064 }, { 214,2064 }, { 215,2064 }, { 216,2064 },
 { 217,2064 }, { 218,2064 }, { 219,2064 }, { 220,2064 }, { 221,2064 },
 { 222,2064 }, { 223,2064 }, { 224,2064 }, { 225,2064 }, { 226,2064 },
 { 227,2064 }, { 228,2064 }, { 229,2064 }, { 230,2064 }, { 231,2064 },
 { 232,2064 }, { 233,2064 }, { 234,2064 }, { 235,2064 }, { 236,2064 },
 { 237,2064 }, { 238,2064 }, { 239,2064 }, { 240,2064 }, { 241,2064 },
 { 242,2064 }, { 243,2064 }, { 244,2064 }, { 245,2064 }, { 246,2064 },

 { 247,2064 }, { 248,2064 }, { 249,2064 }, { 250,2064 }, { 251,2064 },
 { 252,2064 }, { 253,2064 }, { 254,2064 }, { 255,2064 }, { 256,2064 },
 {   0,   0 }, {   0,6406 }, {   1,1806 }, {   2,1806 }, {   3,1806 },
 {   4,1806 }, {   5,1806 }, {   6,1806 }, {   7,1806 }, {   8,1806 },
 {   9,1808 }, {  10,1813 }, {  11,1808 }, {  12,1808 }, {  13,1808 },
 {  14,1806 }, {  15,1806 }, {  16,1806 }, {  17,1806 }, {  18,1806 },
 {  19,1806 }, {  20,1806 }, {  21,1806 }, {  22,1806 }, {  23,1806 },
 {  24,1806 }, {  25,1806 }, {  26,1806 }, {  27,1806 }, {  28,1806 },
 {  29,1806 }, {  30,1806 }, {  31,1806 }, {  32,1808 }, {  33,1810 },
 {  34,1815 }, {  35,1842 }, {  36,1842 }, {  37,1806 }, {  38,1828 },

 {  39,1815 }, {  40,1830 }, {  41,1832 }, {  42,1834 }, {  43,1934 },
 {  44,1836 }, {  45,1966 }, {  46,1976 }, {  47,1838 }, {  48,1993 },
 {  49,1993 }, {  50,1993 }, {  51,1993 }, {  52,1993 }, {  53,1993 },
 {  54,1993 }, {  55,1993 }, {  56,1993 }, {  57,1993 }, {  58,1844 },
 {  59,1847 }, {  60,1973 }, {  61,1978 }, {  62,1995 }, {  63,1806 },
 {  64,1842 }, {  65,1842 }, {  66,1842 }, {  67,1842 }, {  68,1842 },
 {  69,1842 }, {  70,1842 }, {  71,1842 }, {  72,1842 }, {  73,1842 },
 {  74,1842 }, {  75,1842 }, {  76,1842 }, {  77,1842 }, {  78,1842 },
 {  79,1842 }, {  80,1842 }, {  81,1842 }, {  82,1842 }, {  83,1842 },
 {  84,1842 }, {  85,1842 }, {  86,1842 }, {  87,1842 }, {  88,1842 },

 {  89,1842 }, {  90,1842 }, {  91,1806 }, {  92,1806 }, {  93,1806 },
 {  94,1997 }, {  95,1842 }, {  96,1815 }, {  97,1842 }, {  98,1842 },
 {  99,1842 }, { 100,1842 }, { 101,1842 }, { 102,1842 }, { 103,1842 },
 { 104,1842 }, { 105,1842 }, { 106,1842 }, { 107,1842 }, { 108,1842 },
 { 109,1842 }, { 110,1842 }, { 111,1842 }, { 112,1842 }, { 113,1842 },
 { 114,1842 }, { 115,1842 }, { 116,1842 }, { 117,1842 }, { 118,1842 },
 { 119,1842 }, { 120,1842 }, { 121,1842 }, { 122,1842 }, { 123,1806 },
 { 124,1999 }, { 125,1806 }, { 126,2009 }, { 127,1806 }, { 128,1806 },
 { 129,1806 }, { 130,1806 }, { 131,1806 }, { 132,1806 }, { 133,1806 },
 { 134,1806 }, { 135,1806 }, { 136,1806 }, { 137,1806 }, { 138,1806 },

 { 139,1806 }, { 140,1806 }, { 141,1806 }, { 142,1806 }, { 143,1806 },
 { 144,1806 }, { 145,1806 }, { 146,1806 }, { 147,1806 }, { 148,1806 },
 { 149,1806 }, { 150,1806 }, { 151,1806 }, { 152,1806 }, { 153,1806 },
 { 154,1806 }, { 155,1806 }, { 156,1806 }, { 157,1806 }, { 158,1806 },
 { 159,1806 }, { 160,1806 }, { 161,1806 }, { 162,1806 }, { 163,1806 },
 { 164,1806 }, { 165,1806 }, { 166,1806 }, { 167,1806 }, { 168,1806 },
 { 169,1806 }, { 170,1806 }, { 171,1806 }, { 172,1806 }, { 173,1806 },
 { 174,1806 }, { 175,1806 }, { 176,1806 }, { 177,1806 }, { 178,1806 },
 { 179,1806 }, { 180,1806 }, { 181,1806 }, { 182,1806 }, { 183,1806 },
 { 184,1806 }, { 185,1806 }, { 186,1806 }, { 187,1806 }, { 188,1806 },

 { 189,1806 }, { 190,1806 }, { 191,1806 }, { 192,1806 }, { 193,1806 },
 { 194,1806 }, { 195,1806 }, { 196,1806 }, { 197,1806 }, { 198,1806 },
 { 199,1806 }, { 200,1806 }, { 201,1806 }, { 202,1806 }, { 203,1806 },
 { 204,1806 }, { 205,1806 }, { 206,1806 }, { 207,1806 }, { 208,1806 },
 { 209,1806 }, { 210,1806 }, { 211,1806 }, { 212,1806 }, { 213,1806 },
 { 214,1806 }, { 215,1806 }, { 216,1806 }, { 217,1806 }, { 218,1806 },
 { 219,1806 }, { 220,1806 }, { 221,1806 }, { 222,1806 }, { 223,1806 },
 { 224,1806 }, { 225,1806 }, { 226,1806 }, { 227,1806 }, { 228,1806 },
 { 229,1806 }, { 230,1806 }, { 231,1806 }, { 232,1806 }, { 233,1806 },
 { 234,1806 }, { 235,1806 }, { 236,1806 }, { 237,1806 }, { 238,1806 },

 { 239,1806 }, { 240,1806 }, { 241,1806 }, { 242,1806 }, { 243,1806 },
 { 244,1806 }, { 245,1806 }, { 246,1806 }, { 247,1806 }, { 248,1806 },
 { 249,1806 }, { 250,1806 }, { 251,1806 }, { 252,1806 }, { 253,1806 },
 { 254,1806 }, { 255,1806 }, { 256,1806 }, {   0,   5 }, {   0,6148 },
 {   1,1867 }, {   2,1867 }, {   3,1867 }, {   4,1867 }, {   5,1867 },
 {   6,1867 }, {   7,1867 }, {   8,1867 }, {   9,1867 }, {  10,1867 },
 {  11,1867 }, {  12,1867 }, {  13,1867 }, {  14,1867 }, {  15,1867 },
 {  16,1867 }, {  17,1867 }, {  18,1867 }, {  19,1867 }, {  20,1867 },
 {  21,1867 }, {  22,1867 }, {  23,1867 }, {  24,1867 }, {  25,1867 },
 {  26,1867 }, {  27,1867 }, {  28,1867 }, {  29,1867 }, {  30,1867 },

 {  31,1867 }, {  32,1867 }, {  33,1867 }, {  34,1867 }, {  35,1867 },
 {  36,1867 }, {  37,1867 }, {  38,1867 }, {  39,1867 }, {  40,1867 },
 {  41,1867 }, {  42,2125 }, {  43,1867 }, {  44,1867 }, {  45,1867 },
 {  46,1867 }, {  47,1867 }, {  48,1867 }, {  49,1867 }, {  50,1867 },
 {  51,1867 }, {  52,1867 }, {  53,1867 }, {  54,1867 }, {  55,1867 },
 {  56,1867 }, {  57,1867 }, {  58,1867 }, {  59,1867 }, {  60,1867 },
 {  61,1867 }, {  62,1867 }, {  63,1867 }, {  64,1867 }, {  65,1867 },
 {  66,1867 }, {  67,1867 }, {  68,1867 }, {  69,1867 }, {  70,1867 },
 {  71,1867 }, {  72,1867 }, {  73,1867 }, {  74,1867 }, {  75,1867 },
 {  76,1867 }, {  77,1867 }, {  78,1867 }, {  79,1867 }, {  80,1867 },

 {  81,1867 }, {  82,1867 }, {  83,1867 }, {  84,1867 }, {  85,1867 },
 {  86,1867 }, {  87,1867 }, {  88,1867 }, {  89,1867 }, {  90,1867 },
 {  91,1867 }, {  92,1867 }, {  93,1867 }, {  94,1867 }, {  95,1867 },
 {  96,1867 }, {  97,1867 }, {  98,1867 }, {  99,1867 }, { 100,1867 },
 { 101,1867 }, { 102,1867 }, { 103,1867 }, { 104,1867 }, { 105,1867 },
 { 106,1867 }, { 107,1867 }, { 108,1867 }, { 109,1867 }, { 110,1867 },
 { 111,1867 }, { 112,1867 }, { 113,1867 }, { 114,1867 }, { 115,1867 },
 { 116,1867 }, { 117,1867 }, { 118,1867 }, { 119,1867 }, { 120,1867 },
 { 121,1867 }, { 122,1867 }, { 123,1867 }, { 124,1867 }, { 125,1867 },
 { 126,1867 }, { 127,1867 }, { 128,1867 }, { 129,1867 }, { 130,1867 },

 { 131,1867 }, { 132,1867 }, { 133,1867 }, { 134,1867 }, { 135,1867 },
 { 136,1867 }, { 137,1867 }, { 138,1867 }, { 139,1867 }, { 140,1867 },
 { 141,1867 }, { 142,1867 }, { 143,1867 }, { 144,1867 }, { 145,1867 },
 { 146,1867 }, { 147,1867 }, { 148,1867 }, { 149,1867 }, { 150,1867 },
 { 151,1867 }, { 152,1867 }, { 153,1867 }, { 154,1867 }, { 155,1867 },
 { 156,1867 }, { 157,1867 }, { 158,1867 }, { 159,1867 }, { 160,1867 },
 { 161,1867 }, { 162,1867 }, { 163,1867 }, { 164,1867 }, { 165,1867 },
 { 166,1867 }, { 167,1867 }, { 168,1867 }, { 169,1867 }, { 170,1867 },
 { 171,1867 }, { 172,1867 }, { 173,1867 }, { 174,1867 }, { 175,1867 },
 { 176,1867 }, { 177,1867 }, { 178,1867 }, { 179,1867 }, { 180,1867 },

 { 181,1867 }, { 182,1867 }, { 183,1867 }, { 184,1867 }, { 185,1867 },
 { 186,1867 }, { 187,1867 }, { 188,1867 }, { 189,1867 }, { 190,1867 },
 { 191,1867 }, { 192,1867 }, { 193,1867 }, { 194,1867 }, { 195,1867 },
 { 196,1867 }, { 197,1867 }, { 198,1867 }, { 199,1867 }, { 200,1867 },
 { 201,1867 }, { 202,1867 }, { 203,1867 }, { 204,1867 }, { 205,1867 },
 { 206,1867 }, { 207,1867 }, { 208,1867 }, { 209,1867 }, { 210,1867 },
 { 211,1867 }, { 212,1867 }, { 213,1867 }, { 214,1867 }, { 215,1867 },
 { 216,1867 }, { 217,1867 }, { 218,1867 }, { 219,1867 }, { 220,1867 },
 { 221,1867 }, { 222,1867 }, { 223,1867 }, { 224,1867 }, { 225,1867 },
 { 226,1867 }, { 227,1867 }, { 228,1867 }, { 229,1867 }, { 230,1867 },

 { 231,1867 }, { 232,1867 }, { 233,1867 }, { 234,1867 }, { 235,1867 },
 { 236,1867 }, { 237,1867 }, { 238,1867 }, { 239,1867 }, { 240,1867 },
 { 241,1867 }, { 242,1867 }, { 243,1867 }, { 244,1867 }, { 245,1867 },
 { 246,1867 }, { 247,1867 }, { 248,1867 }, { 249,1867 }, { 250,1867 },
 { 251,1867 }, { 252,1867 }, { 253,1867 }, { 254,1867 }, { 255,1867 },
 { 256,1867 }, {   0,   5 }, {   0,5890 }, {   1,1609 }, {   2,1609 },
 {   3,1609 }, {   4,1609 }, {   5,1609 }, {   6,1609 }, {   7,1609 },
 {   8,1609 }, {   9,1609 }, {  10,1609 }, {  11,1609 }, {  12,1609 },
 {  13,1609 }, {  14,1609 }, {  15,1609 }, {  16,1609 }, {  17,1609 },
 {  18,1609 }, {  19,1609 }, {  20,1609 }, {  21,1609 }, {  22,1609 },

 {  23,1609 }, {  24,1609 }, {  25,1609 }, {  26,1609 }, {  27,1609 },
 {  28,1609 }, {  29,1609 }, {  30,1609 }, {  31,1609 }, {  32,1609 },
 {  33,1609 }, {  34,1609 }, {  35,1609 }, {  36,1609 }, {  37,1609 },
 {  38,1609 }, {  39,1609 }, {  40,1609 }, {  41,1609 }, {  42,1867 },
 {  43,1609 }, {  44,1609 }, {  45,1609 }, {  46,1609 }, {  47,1609 },
 {  48,1609 }, {  49,1609 }, {  50,1609 }, {  51,1609 }, {  52,1609 },
 {  53,1609 }, {  54,1609 }, {  55,1609 }, {  56,1609 }, {  57,1609 },
 {  58,1609 }, {  59,1609 }, {  60,1609 }, {  61,1609 }, {  62,1609 },
 {  63,1609 }, {  64,1609 }, {  65,1609 }, {  66,1609 }, {  67,1609 },
 {  68,1609 }, {  69,1609 }, {  70,1609 }, {  71,1609 }, {  72,1609 },

 {  73,1609 }, {  74,1609 }, {  75,1609 }, {  76,1609 }, {  77,1609 },
 {  78,1609 }, {  79,1609 }, {  80,1609 }, {  81,1609 }, {  82,1609 },
 {  83,1609 }, {  84,1609 }, {  85,1609 }, {  86,1609 }, {  87,1609 },
 {  88,1609 }, {  89,1609 }, {  90,1609 }, {  91,1609 }, {  92,1609 },
 {  93,1609 }, {  94,1609 }, {  95,1609 }, {  96,1609 }, {  97,1609 },
 {  98,1609 }, {  99,1609 }, { 100,1609 }, { 101,1609 }, { 102,1609 },
 { 103,1609 }, { 104,1609 }, { 105,1609 }, { 106,1609 }, { 107,1609 },
 { 108,1609 }, { 109,1609 }, { 110,1609 }, { 111,1609 }, { 112,1609 },
 { 113,1609 }, { 114,1609 }, { 115,1609 }, { 116,1609 }, { 117,1609 },
 { 118,1609 }, { 119,1609 }, { 120,1609 }, { 121,1609 }, { 122,1609 },

 { 123,1609 }, { 124,1609 }, { 125,1609 }, { 126,1609 }, { 127,1609 },
 { 128,1609 }, { 129,1609 }, { 130,1609 }, { 131,1609 }, { 132,1609 },
 { 133,1609 }, { 134,1609 }, { 135,1609 }, { 136,1609 }, { 137,1609 },
 { 138,1609 }, { 139,1609 }, { 140,1609 }, { 141,1609 }, { 142,1609 },
 { 143,1609 }, { 144,1609 }, { 145,1609 }, { 146,1609 }, { 147,1609 },
 { 148,1609 }, { 149,1609 }, { 150,1609 }, { 151,1609 }, { 152,1609 },
 { 153,1609 }, { 154,1609 }, { 155,1609 }, { 156,1609 }, { 157,1609 },
 { 158,1609 }, { 159,1609 }, { 160,1609 }, { 161,1609 }, { 162,1609 },
 { 163,1609 }, { 164,1609 }, { 165,1609 }, { 166,1609 }, { 167,1609 },
 { 168,1609 }, { 169,1609 }, { 170,1609 }, { 171,1609 }, { 172,1609 },

 { 173,1609 }, { 174,1609 }, { 175,1609 }, { 176,1609 }, { 177,1609 },
 { 178,1609 }, { 179,1609 }, { 180,1609 }, { 181,1609 }, { 182,1609 },
 { 183,1609 }, { 184,1609 }, { 185,1609 }, { 186,1609 }, { 187,1609 },
 { 188,1609 }, { 189,1609 }, { 190,1609 }, { 191,1609 }, { 192,1609 },
 { 193,1609 }, { 194,1609 }, { 195,1609 }, { 196,1609 }, { 197,1609 },
 { 198,1609 }, { 199,1609 }, { 200,1609 }, { 201,1609 }, { 202,1609 },
 { 203,1609 }, { 204,1609 }, { 205,1609 }, { 206,1609 }, { 207,1609 },
 { 208,1609 }, { 209,1609 }, { 210,1609 }, { 211,1609 }, { 212,1609 },
 { 213,1609 }, { 214,1609 }, { 215,1609 }, { 216,1609 }, { 217,1609 },
 { 218,1609 }, { 219,1609 }, { 220,1609 }, { 221,1609 }, { 222,1609 },

 { 223,1609 }, { 224,1609 }, { 225,1609 }, { 226,1609 }, { 227,1609 },
 { 228,1609 }, { 229,1609 }, { 230,1609 }, { 231,1609 }, { 232,1609 },
 { 233,1609 }, { 234,1609 }, { 235,1609 }, { 236,1609 }, { 237,1609 },
 { 238,1609 }, { 239,1609 }, { 240,1609 }, { 241,1609 }, { 242,1609 },
 { 243,1609 }, { 244,1609 }, { 245,1609 }, { 246,1609 }, { 247,1609 },
 { 248,1609 }, { 249,1609 }, { 250,1609 }, { 251,1609 }, { 252,1609 },
 { 253,1609 }, { 254,1609 }, { 255,1609 }, { 256,1609 }, {   0,   8 },
 {   0,5632 }, {   1,1867 }, {   2,1867 }, {   3,1867 }, {   4,1867 },
 {   5,1867 }, {   6,1867 }, {   7,1867 }, {   8,1867 }, {   9,1867 },
 {  10,1263 }, {  11,1867 }, {  12,1867 }, {  13,2125 }, {  14,1867 },

 {  15,1867 }, {  16,1867 }, {  17,1867 }, {  18,1867 }, {  19,1867 },
 {  20,1867 }, {  21,1867 }, {  22,1867 }, {  23,1867 }, {  24,1867 },
 {  25,1867 }, {  26,1867 }, {  27,1867 }, {  28,1867 }, {  29,1867 },
 {  30,1867 }, {  31,1867 }, {  32,1867 }, {  33,1867 }, {  34,1867 },
 {  35,1867 }, {  36,1867 }, {  37,1867 }, {  38,1867 }, {  39,1867 },
 {  40,1867 }, {  41,1867 }, {  42,1867 }, {  43,1867 }, {  44,1867 },
 {  45,1867 }, {  46,1867 }, {  47,1867 }, {  48,1867 }, {  49,1867 },
 {  50,1867 }, {  51,1867 }, {  52,1867 }, {  53,1867 }, {  54,1867 },
 {  55,1867 }, {  56,1867 }, {  57,1867 }, {  58,1867 }, {  59,1867 },
 {  60,1867 }, {  61,1867 }, {  62,1867 }, {  63,1867 }, {  64,1867 },

 {  65,1867 }, {  66,1867 }, {  67,1867 }, {  68,1867 }, {  69,1867 },
 {  70,1867 }, {  71,1867 }, {  72,1867 }, {  73,1867 }, {  74,1867 },
 {  75,1867 }, {  76,1867 }, {  77,1867 }, {  78,1867 }, {  79,1867 },
 {  80,1867 }, {  81,1867 }, {  82,1867 }, {  83,1867 }, {  84,1867 },
 {  85,1867 }, {  86,1867 }, {  87,1867 }, {  88,1867 }, {  89,1867 },
 {  90,1867 }, {  91,1867 }, {  92,1867 }, {  93,1867 }, {  94,1867 },
 {  95,1867 }, {  96,1867 }, {  97,1867 }, {  98,1867 }, {  99,1867 },
 { 100,1867 }, { 101,1867 }, { 102,1867 }, { 103,1867 }, { 104,1867 },
 { 105,1867 }, { 106,1867 }, { 107,1867 }, { 108,1867 }, { 109,1867 },
 { 110,1867 }, { 111,1867 }, { 112,1867 }, { 113,1867 }, { 114,1867 },

 { 115,1867 }, { 116,1867 }, { 117,1867 }, { 118,1867 }, { 119,1867 },
 { 120,1867 }, { 121,1867 }, { 122,1867 }, { 123,1867 }, { 124,1867 },
 { 125,1867 }, { 126,1867 }, { 127,1867 }, { 128,1867 }, { 129,1867 },
 { 130,1867 }, { 131,1867 }, { 132,1867 }, { 133,1867 }, { 134,1867 },
 { 135,1867 }, { 136,1867 }, { 137,1867 }, { 138,1867 }, { 139,1867 },
 { 140,1867 }, { 141,1867 }, { 142,1867 }, { 143,1867 }, { 144,1867 },
 { 145,1867 }, { 146,1867 }, { 147,1867 }, { 148,1867 }, { 149,1867 },
 { 150,1867 }, { 151,1867 }, { 152,1867 }, { 153,1867 }, { 154,1867 },
 { 155,1867 }, { 156,1867 }, { 157,1867 }, { 158,1867 }, { 159,1867 },
 { 160,1867 }, { 161,1867 }, { 162,1867 }, { 163,1867 }, { 164,1867 },

 { 165,1867 }, { 166,1867 }, { 167,1867 }, { 168,1867 }, { 169,1867 },
 { 170,1867 }, { 171,1867 }, { 172,1867 }, { 173,1867 }, { 174,1867 },
 { 175,1867 }, { 176,1867 }, { 177,1867 }, { 178,1867 }, { 179,1867 },
 { 180,1867 }, { 181,1867 }, { 182,1867 }, { 183,1867 }, { 184,1867 },
 { 185,1867 }, { 186,1867 }, { 187,1867 }, { 188,1867 }, { 189,1867 },
 { 190,1867 }, { 191,1867 }, { 192,1867 }, { 193,1867 }, { 194,1867 },
 { 195,1867 }, { 196,1867 }, { 197,1867 }, { 198,1867 }, { 199,1867 },
 { 200,1867 }, { 201,1867 }, { 202,1867 }, { 203,1867 }, { 204,1867 },
 { 205,1867 }, { 206,1867 }, { 207,1867 }, { 208,1867 }, { 209,1867 },
 { 210,1867 }, { 211,1867 }, { 212,1867 }, { 213,1867 }, { 214,1867 },

 { 215,1867 }, { 216,1867 }, { 217,1867 }, { 218,1867 }, { 219,1867 },
 { 220,1867 }, { 221,1867 }, { 222,1867 }, { 223,1867 }, { 224,1867 },
 { 225,1867 }, { 226,1867 }, { 227,1867 }, { 228,1867 }, { 229,1867 },
 { 230,1867 }, { 231,1867 }, { 232,1867 }, { 233,1867 }, { 234,1867 },
 { 235,1867 }, { 236,1867 }, { 237,1867 }, { 238,1867 }, { 239,1867 },
 { 240,1867 }, { 241,1867 }, { 242,1867 }, { 243,1867 }, { 244,1867 },
 { 245,1867 }, { 246,1867 }, { 247,1867 }, { 248,1867 }, { 249,1867 },
 { 250,1867 }, { 251,1867 }, { 252,1867 }, { 253,1867 }, { 254,1867 },
 { 255,1867 }, { 256,1867 }, {   0,   8 }, {   0,5374 }, {   1,1609 },
 {   2,1609 }, {   3,1609 }, {   4,1609 }, {   5,1609 }, {   6,1609 },

 {   7,1609 }, {   8,1609 }, {   9,1609 }, {  10,1005 }, {  11,1609 },
 {  12,1609 }, {  13,1867 }, {  14,1609 }, {  15,1609 }, {  16,1609 },
 {  17,1609 }, {  18,1609 }, {  19,1609 }, {  20,1609 }, {  21,1609 },
 {  22,1609 }, {  23,1609 }, {  24,1609 }, {  25,1609 }, {  26,1609 },
 {  27,1609 }, {  28,1609 }, {  29,1609 }, {  30,1609 }, {  31,1609 },
 {  32,1609 }, {  33,1609 }, {  34,1609 }, {  35,1609 }, {  36,1609 },
 {  37,1609 }, {  38,1609 }, {  39,1609 }, {  40,1609 }, {  41,1609 },
 {  42,1609 }, {  43,1609 }, {  44,1609 }, {  45,1609 }, {  46,1609 },
 {  47,1609 }, {  48,1609 }, {  49,1609 }, {  50,1609 }, {  51,1609 },
 {  52,1609 }, {  53,1609 }, {  54,1609 }, {  55,1609 }, {  56,1609 },

 {  57,1609 }, {  58,1609 }, {  59,1609 }, {  60,1609 }, {  61,1609 },
 {  62,1609 }, {  63,1609 }, {  64,1609 }, {  65,1609 }, {  66,1609 },
 {  67,1609 }, {  68,1609 }, {  69,1609 }, {  70,1609 }, {  71,1609 },
 {  72,1609 }, {  73,1609 }, {  74,1609 }, {  75,1609 }, {  76,1609 },
 {  77,1609 }, {  78,1609 }, {  79,1609 }, {  80,1609 }, {  81,1609 },
 {  82,1609 }, {  83,1609 }, {  84,1609 }, {  85,1609 }, {  86,1609 },
 {  87,1609 }, {  88,1609 }, {  89,1609 }, {  90,1609 }, {  91,1609 },
 {  92,1609 }, {  93,1609 }, {  94,1609 }, {  95,1609 }, {  96,1609 },
 {  97,1609 }, {  98,1609 }, {  99,1609 }, { 100,1609 }, { 101,1609 },
 { 102,1609 }, { 103,1609 }, { 104,1609 }, { 105,1609 }, { 106,1609 },

 { 107,1609 }, { 108,1609 }, { 109,1609 }, { 110,1609 }, { 111,1609 },
 { 112,1609 }, { 113,1609 }, { 114,1609 }, { 115,1609 }, { 116,1609 },
 { 117,1609 }, { 118,1609 }, { 119,1609 }, { 120,1609 }, { 121,1609 },
 { 122,1609 }, { 123,1609 }, { 124,1609 }, { 125,1609 }, { 126,1609 },
 { 127,1609 }, { 128,1609 }, { 129,1609 }, { 130,1609 }, { 131,1609 },
 { 132,1609 }, { 133,1609 }, { 134,1609 }, { 135,1609 }, { 136,1609 },
 { 137,1609 }, { 138,1609 }, { 139,1609 }, { 140,1609 }, { 141,1609 },
 { 142,1609 }, { 143,1609 }, { 144,1609 }, { 145,1609 }, { 146,1609 },
 { 147,1609 }, { 148,1609 }, { 149,1609 }, { 150,1609 }, { 151,1609 },
 { 152,1609 }, { 153,1609 }, { 154,1609 }, { 155,1609 }, { 156,1609 },

 { 157,1609 }, { 158,1609 }, { 159,1609 }, { 160,1609 }, { 161,1609 },
 { 162,1609 }, { 163,1609 }, { 164,1609 }, { 165,1609 }, { 166,1609 },
 { 167,1609 }, { 168,1609 }, { 169,1609 }, { 170,1609 }, { 171,1609 },
 { 172,1609 }, { 173,1609 }, { 174,1609 }, { 175,1609 }, { 176,1609 },
 { 177,1609 }, { 178,1609 }, { 179,1609 }, { 180,1609 }, { 181,1609 },
 { 182,1609 }, { 183,1609 }, { 184,1609 }, { 185,1609 }, { 186,1609 },
 { 187,1609 }, { 188,1609 }, { 189,1609 }, { 190,1609 }, { 191,1609 },
 { 192,1609 }, { 193,1609 }, { 194,1609 }, { 195,1609 }, { 196,1609 },
 { 197,1609 }, { 198,1609 }, { 199,1609 }, { 200,1609 }, { 201,1609 },
 { 202,1609 }, { 203,1609 }, { 204,1609 }, { 205,1609 }, { 206,1609 },

 { 207,1609 }, { 208,1609 }, { 209,1609 }, { 210,1609 }, { 211,1609 },
 { 212,1609 }, { 213,1609 }, { 214,1609 }, { 215,1609 }, { 216,1609 },
 { 217,1609 }, { 218,1609 }, { 219,1609 }, { 220,1609 }, { 221,1609 },
 { 222,1609 }, { 223,1609 }, { 224,1609 }, { 225,1609 }, { 226,1609 },
 { 227,1609 }, { 228,1609 }, { 229,1609 }, { 230,1609 }, { 231,1609 },
 { 232,1609 }, { 233,1609 }, { 234,1609 }, { 235,1609 }, { 236,1609 },
 { 237,1609 }, { 238,1609 }, { 239,1609 }, { 240,1609 }, { 241,1609 },
 { 242,1609 }, { 243,1609 }, { 244,1609 }, { 245,1609 }, { 246,1609 },
 { 247,1609 }, { 248,1609 }, { 249,1609 }, { 250,1609 }, { 251,1609 },
 { 252,1609 }, { 253,1609 }, { 254,1609 }, { 255,1609 }, { 256,1609 },

 {   0,  12 }, {   0,5116 }, {   1,1867 }, {   2,1867 }, {   3,1867 },
 {   4,1867 }, {   5,1867 }, {   6,1867 }, {   7,1867 }, {   8,1867 },
 {   9,1867 }, {  10,1867 }, {  11,1867 }, {  12,1867 }, {  13,1867 },
 {  14,1867 }, {  15,1867 }, {  16,1867 }, {  17,1867 }, {  18,1867 },
 {  19,1867 }, {  20,1867 }, {  21,1867 }, {  22,1867 }, {  23,1867 },
 {  24,1867 }, {  25,1867 }, {  26,1867 }, {  27,1867 }, {  28,1867 },
 {  29,1867 }, {  30,1867 }, {  31,1867 }, {  32,1867 }, {  33,1867 },
 {  34, 781 }, {  35,1867 }, {  36,1867 }, {  37,1867 }, {  38,1867 },
 {  39, 781 }, {  40,1867 }, {  41,1867 }, {  42,1867 }, {  43,1867 },
 {  44,1867 }, {  45,1867 }, {  46,1867 }, {  47,1867 }, {  48,1867 },

 {  49,1867 }, {  50,1867 }, {  51,1867 }, {  52,1867 }, {  53,1867 },
 {  54,1867 }, {  55,1867 }, {  56,1867 }, {  57,1867 }, {  58,1867 },
 {  59,1867 }, {  60,1867 }, {  61,1867 }, {  62,1867 }, {  63,1867 },
 {  64,1867 }, {  65,1867 }, {  66,1867 }, {  67,1867 }, {  68,1867 },
 {  69,1867 }, {  70,1867 }, {  71,1867 }, {  72,1867 }, {  73,1867 },
 {  74,1867 }, {  75,1867 }, {  76,1867 }, {  77,1867 }, {  78,1867 },
 {  79,1867 }, {  80,1867 }, {  81,1867 }, {  82,1867 }, {  83,1867 },
 {  84,1867 }, {  85,1867 }, {  86,1867 }, {  87,1867 }, {  88,1867 },
 {  89,1867 }, {  90,1867 }, {  91,1867 }, {  92,2125 }, {  93,1867 },
 {  94,1867 }, {  95,1867 }, {  96, 781 }, {  97,1867 }, {  98,1867 },

 {  99,1867 }, { 100,1867 }, { 101,1867 }, { 102,1867 }, { 103,1867 },
 { 104,1867 }, { 105,1867 }, { 106,1867 }, { 107,1867 }, { 108,1867 },
 { 109,1867 }, { 110,1867 }, { 111,1867 }, { 112,1867 }, { 113,1867 },
 { 114,1867 }, { 115,1867 }, { 116,1867 }, { 117,1867 }, { 118,1867 },
 { 119,1867 }, { 120,1867 }, { 121,1867 }, { 122,1867 }, { 123,1867 },
 { 124,1867 }, { 125,1867 }, { 126,1867 }, { 127,1867 }, { 128,1867 },
 { 129,1867 }, { 130,1867 }, { 131,1867 }, { 132,1867 }, { 133,1867 },
 { 134,1867 }, { 135,1867 }, { 136,1867 }, { 137,1867 }, { 138,1867 },
 { 139,1867 }, { 140,1867 }, { 141,1867 }, { 142,1867 }, { 143,1867 },
 { 144,1867 }, { 145,1867 }, { 146,1867 }, { 147,1867 }, { 148,1867 },

 { 149,1867 }, { 150,1867 }, { 151,1867 }, { 152,1867 }, { 153,1867 },
 { 154,1867 }, { 155,1867 }, { 156,1867 }, { 157,1867 }, { 158,1867 },
 { 159,1867 }, { 160,1867 }, { 161,1867 }, { 162,1867 }, { 163,1867 },
 { 164,1867 }, { 165,1867 }, { 166,1867 }, { 167,1867 }, { 168,1867 },
 { 169,1867 }, { 170,1867 }, { 171,1867 }, { 172,1867 }, { 173,1867 },
 { 174,1867 }, { 175,1867 }, { 176,1867 }, { 177,1867 }, { 178,1867 },
 { 179,1867 }, { 180,1867 }, { 181,1867 }, { 182,1867 }, { 183,1867 },
 { 184,1867 }, { 185,1867 }, { 186,1867 }, { 187,1867 }, { 188,1867 },
 { 189,1867 }, { 190,1867 }, { 191,1867 }, { 192,1867 }, { 193,1867 },
 { 194,1867 }, { 195,1867 }, { 196,1867 }, { 197,1867 }, { 198,1867 },

 { 199,1867 }, { 200,1867 }, { 201,1867 }, { 202,1867 }, { 203,1867 },
 { 204,1867 }, { 205,1867 }, { 206,1867 }, { 207,1867 }, { 208,1867 },
 { 209,1867 }, { 210,1867 }, { 211,1867 }, { 212,1867 }, { 213,1867 },
 { 214,1867 }, { 215,1867 }, { 216,1867 }, { 217,1867 }, { 218,1867 },
 { 219,1867 }, { 220,1867 }, { 221,1867 }, { 222,1867 }, { 223,1867 },
 { 224,1867 }, { 225,1867 }, { 226,1867 }, { 227,1867 }, { 228,1867 },
 { 229,1867 }, { 230,1867 }, { 231,1867 }, { 232,1867 }, { 233,1867 },
 { 234,1867 }, { 235,1867 }, { 236,1867 }, { 237,1867 }, { 238,1867 },
 { 239,1867 }, { 240,1867 }, { 241,1867 }, { 242,1867 }, { 243,1867 },
 { 244,1867 }, { 245,1867 }, { 246,1867 }, { 247,1867 }, { 248,1867 },

 { 249,1867 }, { 250,1867 }, { 251,1867 }, { 252,1867 }, { 253,1867 },
 { 254,1867 }, { 255,1867 }, { 256,1867 }, {   0,  12 }, {   0,4858 },
 {   1,1609 }, {   2,1609 }, {   3,1609 }, {   4,1609 }, {   5,1609 },
 {   6,1609 }, {   7,1609 }, {   8,1609 }, {   9,1609 }, {  10,1609 },
 {  11,1609 }, {  12,1609 }, {  13,1609 }, {  14,1609 }, {  15,1609 },
 {  16,1609 }, {  17,1609 }, {  18,1609 }, {  19,1609 }, {  20,1609 },
 {  21,1609 }, {  22,1609 }, {  23,1609 }, {  24,1609 }, {  25,1609 },
 {  26,1609 }, {  27,1609 }, {  28,1609 }, {  29,1609 }, {  30,1609 },
 {  31,1609 }, {  32,1609 }, {  33,1609 }, {  34, 523 }, {  35,1609 },
 {  36,1609 }, {  37,1609 }, {  38,1609 }, {  39, 523 }, {  40,1609 },

 {  41,1609 }, {  42,1609 }, {  43,1609 }, {  44,1609 }, {  45,1609 },
 {  46,1609 }, {  47,1609 }, {  48,1609 }, {  49,1609 }, {  50,1609 },
 {  51,1609 }, {  52,1609 }, {  53,1609 }, {  54,1609 }, {  55,1609 },
 {  56,1609 }, {  57,1609 }, {  58,1609 }, {  59,1609 }, {  60,1609 },
 {  61,1609 }, {  62,1609 }, {  63,1609 }, {  64,1609 }, {  65,1609 },
 {  66,1609 }, {  67,1609 }, {  68,1609 }, {  69,1609 }, {  70,1609 },
 {  71,1609 }, {  72,1609 }, {  73,1609 }, {  74,1609 }, {  75,1609 },
 {  76,1609 }, {  77,1609 }, {  78,1609 }, {  79,1609 }, {  80,1609 },
 {  81,1609 }, {  82,1609 }, {  83,1609 }, {  84,1609 }, {  85,1609 },
 {  86,1609 }, {  87,1609 }, {  88,1609 }, {  89,1609 }, {  90,1609 },

 {  91,1609 }, {  92,1867 }, {  93,1609 }, {  94,1609 }, {  95,1609 },
 {  96, 523 }, {  97,1609 }, {  98,1609 }, {  99,1609 }, { 100,1609 },
 { 101,1609 }, { 102,1609 }, { 103,1609 }, { 104,1609 }, { 105,1609 },
 { 106,1609 }, { 107,1609 }, { 108,1609 }, { 109,1609 }, { 110,1609 },
 { 111,1609 }, { 112,1609 }, { 113,1609 }, { 114,1609 }, { 115,1609 },
 { 116,1609 }, { 117,1609 }, { 118,1609 }, { 119,1609 }, { 120,1609 },
 { 121,1609 }, { 122,1609 }, { 123,1609 }, { 124,1609 }, { 125,1609 },
 { 126,1609 }, { 127,1609 }, { 128,1609 }, { 129,1609 }, { 130,1609 },
 { 131,1609 }, { 132,1609 }, { 133,1609 }, { 134,1609 }, { 135,1609 },
 { 136,1609 }, { 137,1609 }, { 138,1609 }, { 139,1609 }, { 140,1609 },

 { 141,1609 }, { 142,1609 }, { 143,1609 }, { 144,1609 }, { 145,1609 },
 { 146,1609 }, { 147,1609 }, { 148,1609 }, { 149,1609 }, { 150,1609 },
 { 151,1609 }, { 152,1609 }, { 153,1609 }, { 154,1609 }, { 155,1609 },
 { 156,1609 }, { 157,1609 }, { 158,1609 }, { 159,1609 }, { 160,1609 },
 { 161,1609 }, { 162,1609 }, { 163,1609 }, { 164,1609 }, { 165,1609 },
 { 166,1609 }, { 167,1609 }, { 168,1609 }, { 169,1609 }, { 170,1609 },
 { 171,1609 }, { 172,1609 }, { 173,1609 }, { 174,1609 }, { 175,1609 },
 { 176,1609 }, { 177,1609 }, { 178,1609 }, { 179,1609 }, { 180,1609 },
 { 181,1609 }, { 182,1609 }, { 183,1609 }, { 184,1609 }, { 185,1609 },
 { 186,1609 }, { 187,1609 }, { 188,1609 }, { 189,1609 }, { 190,1609 },

 { 191,1609 }, { 192,1609 }, { 193,1609 }, { 194,1609 }, { 195,1609 },
 { 196,1609 }, { 197,1609 }, { 198,1609 }, { 199,1609 }, { 200,1609 },
 { 201,1609 }, { 202,1609 }, { 203,1609 }, { 204,1609 }, { 205,1609 },
 { 206,1609 }, { 207,1609 }, { 208,1609 }, { 209,1609 }, { 210,1609 },
 { 211,1609 }, { 212,1609 }, { 213,1609 }, { 214,1609 }, { 215,1609 },
 { 216,1609 }, { 217,1609 }, { 218,1609 }, { 219,1609 }, { 220,1609 },
 { 221,1609 }, { 222,1609 }, { 223,1609 }, { 224,1609 }, { 225,1609 },
 { 226,1609 }, { 227,1609 }, { 228,1609 }, { 229,1609 }, { 230,1609 },
 { 231,1609 }, { 232,1609 }, { 233,1609 }, { 234,1609 }, { 235,1609 },
 { 236,1609 }, { 237,1609 }, { 238,1609 }, { 239,1609 }, { 240,1609 },

 { 241,1609 }, { 242,1609 }, { 243,1609 }, { 244,1609 }, { 245,1609 },
 { 246,1609 }, { 247,1609 }, { 248,1609 }, { 249,1609 }, { 250,1609 },
 { 251,1609 }, { 252,1609 }, { 253,1609 }, { 254,1609 }, { 255,1609 },
 { 256,1609 }, {   0,  54 }, {   0,4600 }, {   0,  16 }, {   0,4598 },
 {   0,  54 }, {   0,4596 }, {   0,   0 }, {   0,  16 }, {   0,4593 },
 {   0,  10 }, {   0,4591 }, {   0,   0 }, {   9,1865 }, {  10,1865 },
 {  11,1865 }, {  12,1865 }, {  13,1865 }, {   9,1860 }, {  10,1860 },
 {  11,1860 }, {  12,1860 }, {  13,1860 }, {   0,  44 }, {   0,4578 },
 {   0,  36 }, {   0,4576 }, {   0,  37 }, {   0,4574 }, {   0,  40 },
 {   0,4572 }, {   0,  27 }, {   0,4570 }, {   0,  42 }, {   0,4568 },

 {   0,   0 }, {  32,1865 }, {   0,  20 }, {   0,4564 }, {   0,  54 },
 {   0,4562 }, {  32,1860 }, {   0,  38 }, {   0,4559 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  38, 249 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  61, 263 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  35,1833 }, {  36,1833 },
 {   0,   0 }, {  42, 243 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  46,1925 },

 {   0,   0 }, {  48,1833 }, {  49,1833 }, {  50,1833 }, {  51,1833 },
 {  52,1833 }, {  53,1833 }, {  54,1833 }, {  55,1833 }, {  56,1833 },
 {  57,1833 }, {   0,   0 }, {   0,   0 }, {  58, 239 }, {   0,   0 },
 {   0,   0 }, {  61, 241 }, {  64,1833 }, {  65,1833 }, {  66,1833 },
 {  67,1833 }, {  68,1833 }, {  69,1833 }, {  70,1833 }, {  71,1833 },
 {  72,1833 }, {  73,1833 }, {  74,1833 }, {  75,1833 }, {  76,1833 },
 {  77,1833 }, {  78,1833 }, {  79,1833 }, {  80,1833 }, {  81,1833 },
 {  82,1833 }, {  83,1833 }, {  84,1833 }, {  85,1833 }, {  86,1833 },
 {  87,1833 }, {  88,1833 }, {  89,1833 }, {  90,1833 }, {   0,  41 },
 {   0,4472 }, {   0,   0 }, { 126, 265 }, {  95,1833 }, {   0,   0 },

 {  97,1833 }, {  98,1833 }, {  99,1833 }, { 100,1833 }, { 101,1833 },
 { 102,1833 }, { 103,1833 }, { 104,1833 }, { 105,1833 }, { 106,1833 },
 { 107,1833 }, { 108,1833 }, { 109,1833 }, { 110,1833 }, { 111,1833 },
 { 112,1833 }, { 113,1833 }, { 114,1833 }, { 115,1833 }, { 116,1833 },
 { 117,1833 }, { 118,1833 }, { 119,1833 }, { 120,1833 }, { 121,1833 },
 { 122,1833 }, {   0,  43 }, {   0,4440 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  29 }, {   0,4433 },
 {   0,   0 }, {   0,  28 }, {   0,4430 }, {   0,  33 }, {   0,4428 },
 {   0,   0 }, {  46,1925 }, {   0,   0 }, {  48,1957 }, {  49,1957 },
 {  50,1957 }, {  51,1957 }, {  52,1957 }, {  53,1957 }, {  54,1957 },

 {  55,1957 }, {  56,1957 }, {  57,1957 }, {   0,  21 }, {   0,4413 },
 {   0,  30 }, {   0,4411 }, {   0,  48 }, {   0,4409 }, {   0,  46 },
 {   0,4407 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  50 },
 {   0,4397 }, {   0,   0 }, {  45, 113 }, {  46,1935 }, {   0,   0 },
 {  48,1952 }, {  49,1952 }, {  50,1952 }, {  51,1952 }, {  52,1952 },
 {  53,1952 }, {  54,1952 }, {  55,1952 }, {  56,1952 }, {  57,1952 },
 {  48,1952 }, {  49,1952 }, {  50,1952 }, {  51,1952 }, {  52,1952 },
 {  53,1952 }, {  54,1952 }, {  55,1952 }, {  56,1952 }, {  57,1952 },
 {  61, 114 }, {  62, 118 }, {   0,   9 }, {   0,4369 }, {   0,   0 },

 {  46,1996 }, {   0,   0 }, {  48,2008 }, {  49,2008 }, {  50,2008 },
 {  51,2008 }, {  52,2008 }, {  53,2008 }, {  54,2008 }, {  55,2008 },
 {  56,2008 }, {  57,2008 }, {  42,  91 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  61, 101 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  69,2030 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,  15 }, {   0,4335 }, {   0,  35 }, {   0,4333 },
 {   0,  52 }, {   0,4331 }, {   0,  45 }, {   0,4329 }, {   0,   4 },
 {   0,4327 }, {   0,   2 }, {   0,4325 }, {   0,  49 }, {   0,4323 },
 {   0,  39 }, {   0,4321 }, {   0,  31 }, {   0,4319 }, {   0,   0 },

 {  10,  40 }, {   0,  34 }, {   0,4315 }, {  13,1598 }, {   0,   0 },
 { 101,2030 }, {   0,  32 }, {   0,4310 }, {   0,  47 }, {   0,4308 },
 {   0,  51 }, {   0,4306 }, {   0,   7 }, {   0,4304 }, {   0,   9 },
 {   0,4302 }, {  34,  36 }, {   0,  14 }, {   0,4299 }, {   0,  13 },
 {   0,4297 }, {  39,  36 }, {   0,  11 }, {   0,4294 }, {   0,   0 },
 {  33,1598 }, {   0,  53 }, {   0,4290 }, {  42,  41 }, {   0,   1 },
 {   0,4287 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 124,  99 },
 {   0,   5 }, {   0,4281 }, {   1,1979 }, {   2,1979 }, {   3,1979 },
 {   4,1979 }, {   5,1979 }, {   6,1979 }, {   7,1979 }, {   8,1979 },
 {   9,1979 }, {  10,1979 }, {  11,1979 }, {  12,1979 }, {  13,1979 },

 {  14,1979 }, {  15,1979 }, {  16,1979 }, {  17,1979 }, {  18,1979 },
 {  19,1979 }, {  20,1979 }, {  21,1979 }, {  22,1979 }, {  23,1979 },
 {  24,1979 }, {  25,1979 }, {  26,1979 }, {  27,1979 }, {  28,1979 },
 {  29,1979 }, {  30,1979 }, {  31,1979 }, {  32,1979 }, {  33,1979 },
 {  34,1979 }, {  35,1979 }, {  36,1979 }, {  37,1979 }, {  38,1979 },
 {  39,1979 }, {  40,1979 }, {  41,1979 }, {  96,  36 }, {  43,1979 },
 {  44,1979 }, {  45,1979 }, {  46,1979 }, {  47,1979 }, {  48,1979 },
 {  49,1979 }, {  50,1979 }, {  51,1979 }, {  52,1979 }, {  53,1979 },
 {  54,1979 }, {  55,1979 }, {  56,1979 }, {  57,1979 }, {  58,1979 },
 {  59,1979 }, {  60,1979 }, {  61,1979 }, {  62,1979 }, {  63,1979 },

 {  64,1979 }, {  65,1979 }, {  66,1979 }, {  67,1979 }, {  68,1979 },
 {  69,1979 }, {  70,1979 }, {  71,1979 }, {  72,1979 }, {  73,1979 },
 {  74,1979 }, {  75,1979 }, {  76,1979 }, {  77,1979 }, {  78,1979 },
 {  79,1979 }, {  80,1979 }, {  81,1979 }, {  82,1979 }, {  83,1979 },
 {  84,1979 }, {  85,1979 }, {  86,1979 }, {  87,1979 }, {  88,1979 },
 {  89,1979 }, {  90,1979 }, {  91,1979 }, {  92,1979 }, {  93,1979 },
 {  94,1979 }, {  95,1979 }, {  96,1979 }, {  97,1979 }, {  98,1979 },
 {  99,1979 }, { 100,1979 }, { 101,1979 }, { 102,1979 }, { 103,1979 },
 { 104,1979 }, { 105,1979 }, { 106,1979 }, { 107,1979 }, { 108,1979 },
 { 109,1979 }, { 110,1979 }, { 111,1979 }, { 112,1979 }, { 113,1979 },

 { 114,1979 }, { 115,1979 }, { 116,1979 }, { 117,1979 }, { 118,1979 },
 { 119,1979 }, { 120,1979 }, { 121,1979 }, { 122,1979 }, { 123,1979 },
 { 124,1979 }, { 125,1979 }, { 126,1979 }, { 127,1979 }, { 128,1979 },
 { 129,1979 }, { 130,1979 }, { 131,1979 }, { 132,1979 }, { 133,1979 },
 { 134,1979 }, { 135,1979 }, { 136,1979 }, { 137,1979 }, { 138,1979 },
 { 139,1979 }, { 140,1979 }, { 141,1979 }, { 142,1979 }, { 143,1979 },
 { 144,1979 }, { 145,1979 }, { 146,1979 }, { 147,1979 }, { 148,1979 },
 { 149,1979 }, { 150,1979 }, { 151,1979 }, { 152,1979 }, { 153,1979 },
 { 154,1979 }, { 155,1979 }, { 156,1979 }, { 157,1979 }, { 158,1979 },
 { 159,1979 }, { 160,1979 }, { 161,1979 }, { 162,1979 }, { 163,1979 },

 { 164,1979 }, { 165,1979 }, { 166,1979 }, { 167,1979 }, { 168,1979 },
 { 169,1979 }, { 170,1979 }, { 171,1979 }, { 172,1979 }, { 173,1979 },
 { 174,1979 }, { 175,1979 }, { 176,1979 }, { 177,1979 }, { 178,1979 },
 { 179,1979 }, { 180,1979 }, { 181,1979 }, { 182,1979 }, { 183,1979 },
 { 184,1979 }, { 185,1979 }, { 186,1979 }, { 187,1979 }, { 188,1979 },
 { 189,1979 }, { 190,1979 }, { 191,1979 }, { 192,1979 }, { 193,1979 },
 { 194,1979 }, { 195,1979 }, { 196,1979 }, { 197,1979 }, { 198,1979 },
 { 199,1979 }, { 200,1979 }, { 201,1979 }, { 202,1979 }, { 203,1979 },
 { 204,1979 }, { 205,1979 }, { 206,1979 }, { 207,1979 }, { 208,1979 },
 { 209,1979 }, { 210,1979 }, { 211,1979 }, { 212,1979 }, { 213,1979 },

 { 214,1979 }, { 215,1979 }, { 216,1979 }, { 217,1979 }, { 218,1979 },
 { 219,1979 }, { 220,1979 }, { 221,1979 }, { 222,1979 }, { 223,1979 },
 { 224,1979 }, { 225,1979 }, { 226,1979 }, { 227,1979 }, { 228,1979 },
 { 229,1979 }, { 230,1979 }, { 231,1979 }, { 232,1979 }, { 233,1979 },
 { 234,1979 }, { 235,1979 }, { 236,1979 }, { 237,1979 }, { 238,1979 },
 { 239,1979 }, { 240,1979 }, { 241,1979 }, { 242,1979 }, { 243,1979 },
 { 244,1979 }, { 245,1979 }, { 246,1979 }, { 247,1979 }, { 248,1979 },
 { 249,1979 }, { 250,1979 }, { 251,1979 }, { 252,1979 }, { 253,1979 },
 { 254,1979 }, { 255,1979 }, { 256,1979 }, {   0,   6 }, {   0,4023 },
 {   1,1979 }, {   2,1979 }, {   3,1979 }, {   4,1979 }, {   5,1979 },

 {   6,1979 }, {   7,1979 }, {   8,1979 }, {   9,1979 }, {  10,1979 },
 {  11,1979 }, {  12,1979 }, {  13,1979 }, {  14,1979 }, {  15,1979 },
 {  16,1979 }, {  17,1979 }, {  18,1979 }, {  19,1979 }, {  20,1979 },
 {  21,1979 }, {  22,1979 }, {  23,1979 }, {  24,1979 }, {  25,1979 },
 {  26,1979 }, {  27,1979 }, {  28,1979 }, {  29,1979 }, {  30,1979 },
 {  31,1979 }, {  32,1979 }, {  33,1979 }, {  34,1979 }, {  35,1979 },
 {  36,1979 }, {  37,1979 }, {  38,1979 }, {  39,1979 }, {  40,1979 },
 {  41,1979 }, {  42,2237 }, {  43,1979 }, {  44,1979 }, {  45,1979 },
 {  46,1979 }, {  47,-281 }, {  48,1979 }, {  49,1979 }, {  50,1979 },
 {  51,1979 }, {  52,1979 }, {  53,1979 }, {  54,1979 }, {  55,1979 },

 {  56,1979 }, {  57,1979 }, {  58,1979 }, {  59,1979 }, {  60,1979 },
 {  61,1979 }, {  62,1979 }, {  63,1979 }, {  64,1979 }, {  65,1979 },
 {  66,1979 }, {  67,1979 }, {  68,1979 }, {  69,1979 }, {  70,1979 },
 {  71,1979 }, {  72,1979 }, {  73,1979 }, {  74,1979 }, {  75,1979 },
 {  76,1979 }, {  77,1979 }, {  78,1979 }, {  79,1979 }, {  80,1979 },
 {  81,1979 }, {  82,1979 }, {  83,1979 }, {  84,1979 }, {  85,1979 },
 {  86,1979 }, {  87,1979 }, {  88,1979 }, {  89,1979 }, {  90,1979 },
 {  91,1979 }, {  92,1979 }, {  93,1979 }, {  94,1979 }, {  95,1979 },
 {  96,1979 }, {  97,1979 }, {  98,1979 }, {  99,1979 }, { 100,1979 },
 { 101,1979 }, { 102,1979 }, { 103,1979 }, { 104,1979 }, { 105,1979 },

 { 106,1979 }, { 107,1979 }, { 108,1979 }, { 109,1979 }, { 110,1979 },
 { 111,1979 }, { 112,1979 }, { 113,1979 }, { 114,1979 }, { 115,1979 },
 { 116,1979 }, { 117,1979 }, { 118,1979 }, { 119,1979 }, { 120,1979 },
 { 121,1979 }, { 122,1979 }, { 123,1979 }, { 124,1979 }, { 125,1979 },
 { 126,1979 }, { 127,1979 }, { 128,1979 }, { 129,1979 }, { 130,1979 },
 { 131,1979 }, { 132,1979 }, { 133,1979 }, { 134,1979 }, { 135,1979 },
 { 136,1979 }, { 137,1979 }, { 138,1979 }, { 139,1979 }, { 140,1979 },
 { 141,1979 }, { 142,1979 }, { 143,1979 }, { 144,1979 }, { 145,1979 },
 { 146,1979 }, { 147,1979 }, { 148,1979 }, { 149,1979 }, { 150,1979 },
 { 151,1979 }, { 152,1979 }, { 153,1979 }, { 154,1979 }, { 155,1979 },

 { 156,1979 }, { 157,1979 }, { 158,1979 }, { 159,1979 }, { 160,1979 },
 { 161,1979 }, { 162,1979 }, { 163,1979 }, { 164,1979 }, { 165,1979 },
 { 166,1979 }, { 167,1979 }, { 168,1979 }, { 169,1979 }, { 170,1979 },
 { 171,1979 }, { 172,1979 }, { 173,1979 }, { 174,1979 }, { 175,1979 },
 { 176,1979 }, { 177,1979 }, { 178,1979 }, { 179,1979 }, { 180,1979 },
 { 181,1979 }, { 182,1979 }, { 183,1979 }, { 184,1979 }, { 185,1979 },
 { 186,1979 }, { 187,1979 }, { 188,1979 }, { 189,1979 }, { 190,1979 },
 { 191,1979 }, { 192,1979 }, { 193,1979 }, { 194,1979 }, { 195,1979 },
 { 196,1979 }, { 197,1979 }, { 198,1979 }, { 199,1979 }, { 200,1979 },
 { 201,1979 }, { 202,1979 }, { 203,1979 }, { 204,1979 }, { 205,1979 },

 { 206,1979 }, { 207,1979 }, { 208,1979 }, { 209,1979 }, { 210,1979 },
 { 211,1979 }, { 212,1979 }, { 213,1979 }, { 214,1979 }, { 215,1979 },
 { 216,1979 }, { 217,1979 }, { 218,1979 }, { 219,1979 }, { 220,1979 },
 { 221,1979 }, { 222,1979 }, { 223,1979 }, { 224,1979 }, { 225,1979 },
 { 226,1979 }, { 227,1979 }, { 228,1979 }, { 229,1979 }, { 230,1979 },
 { 231,1979 }, { 232,1979 }, { 233,1979 }, { 234,1979 }, { 235,1979 },
 { 236,1979 }, { 237,1979 }, { 238,1979 }, { 239,1979 }, { 240,1979 },
 { 241,1979 }, { 242,1979 }, { 243,1979 }, { 244,1979 }, { 245,1979 },
 { 246,1979 }, { 247,1979 }, { 248,1979 }, { 249,1979 }, { 250,1979 },
 { 251,1979 }, { 252,1979 }, { 253,1979 }, { 254,1979 }, { 255,1979 },

 { 256,1979 }, {   0,   8 }, {   0,3765 }, {   1,2237 }, {   2,2237 },
 {   3,2237 }, {   4,2237 }, {   5,2237 }, {   6,2237 }, {   7,2237 },
 {   8,2237 }, {   9,2237 }, {   0,   0 }, {  11,2237 }, {  12,2237 },
 {  13,2237 }, {  14,2237 }, {  15,2237 }, {  16,2237 }, {  17,2237 },
 {  18,2237 }, {  19,2237 }, {  20,2237 }, {  21,2237 }, {  22,2237 },
 {  23,2237 }, {  24,2237 }, {  25,2237 }, {  26,2237 }, {  27,2237 },
 {  28,2237 }, {  29,2237 }, {  30,2237 }, {  31,2237 }, {  32,2237 },
 {  33,2237 }, {  34,2237 }, {  35,2237 }, {  36,2237 }, {  37,2237 },
 {  38,2237 }, {  39,2237 }, {  40,2237 }, {  41,2237 }, {  42,2237 },
 {  43,2237 }, {  44,2237 }, {  45,2237 }, {  46,2237 }, {  47,2237 },

 {  48,2237 }, {  49,2237 }, {  50,2237 }, {  51,2237 }, {  52,2237 },
 {  53,2237 }, {  54,2237 }, {  55,2237 }, {  56,2237 }, {  57,2237 },
 {  58,2237 }, {  59,2237 }, {  60,2237 }, {  61,2237 }, {  62,2237 },
 {  63,2237 }, {  64,2237 }, {  65,2237 }, {  66,2237 }, {  67,2237 },
 {  68,2237 }, {  69,2237 }, {  70,2237 }, {  71,2237 }, {  72,2237 },
 {  73,2237 }, {  74,2237 }, {  75,2237 }, {  76,2237 }, {  77,2237 },
 {  78,2237 }, {  79,2237 }, {  80,2237 }, {  81,2237 }, {  82,2237 },
 {  83,2237 }, {  84,2237 }, {  85,2237 }, {  86,2237 }, {  87,2237 },
 {  88,2237 }, {  89,2237 }, {  90,2237 }, {  91,2237 }, {  92,2237 },
 {  93,2237 }, {  94,2237 }, {  95,2237 }, {  96,2237 }, {  97,2237 },

 {  98,2237 }, {  99,2237 }, { 100,2237 }, { 101,2237 }, { 102,2237 },
 { 103,2237 }, { 104,2237 }, { 105,2237 }, { 106,2237 }, { 107,2237 },
 { 108,2237 }, { 109,2237 }, { 110,2237 }, { 111,2237 }, { 112,2237 },
 { 113,2237 }, { 114,2237 }, { 115,2237 }, { 116,2237 }, { 117,2237 },
 { 118,2237 }, { 119,2237 }, { 120,2237 }, { 121,2237 }, { 122,2237 },
 { 123,2237 }, { 124,2237 }, { 125,2237 }, { 126,2237 }, { 127,2237 },
 { 128,2237 }, { 129,2237 }, { 130,2237 }, { 131,2237 }, { 132,2237 },
 { 133,2237 }, { 134,2237 }, { 135,2237 }, { 136,2237 }, { 137,2237 },
 { 138,2237 }, { 139,2237 }, { 140,2237 }, { 141,2237 }, { 142,2237 },
 { 143,2237 }, { 144,2237 }, { 145,2237 }, { 146,2237 }, { 147,2237 },

 { 148,2237 }, { 149,2237 }, { 150,2237 }, { 151,2237 }, { 152,2237 },
 { 153,2237 }, { 154,2237 }, { 155,2237 }, { 156,2237 }, { 157,2237 },
 { 158,2237 }, { 159,2237 }, { 160,2237 }, { 161,2237 }, { 162,2237 },
 { 163,2237 }, { 164,2237 }, { 165,2237 }, { 166,2237 }, { 167,2237 },
 { 168,2237 }, { 169,2237 }, { 170,2237 }, { 171,2237 }, { 172,2237 },
 { 173,2237 }, { 174,2237 }, { 175,2237 }, { 176,2237 }, { 177,2237 },
 { 178,2237 }, { 179,2237 }, { 180,2237 }, { 181,2237 }, { 182,2237 },
 { 183,2237 }, { 184,2237 }, { 185,2237 }, { 186,2237 }, { 187,2237 },
 { 188,2237 }, { 189,2237 }, { 190,2237 }, { 191,2237 }, { 192,2237 },
 { 193,2237 }, { 194,2237 }, { 195,2237 }, { 196,2237 }, { 197,2237 },

 { 198,2237 }, { 199,2237 }, { 200,2237 }, { 201,2237 }, { 202,2237 },
 { 203,2237 }, { 204,2237 }, { 205,2237 }, { 206,2237 }, { 207,2237 },
 { 208,2237 }, { 209,2237 }, { 210,2237 }, { 211,2237 }, { 212,2237 },
 { 213,2237 }, { 214,2237 }, { 215,2237 }, { 216,2237 }, { 217,2237 },
 { 218,2237 }, { 219,2237 }, { 220,2237 }, { 221,2237 }, { 222,2237 },
 { 223,2237 }, { 224,2237 }, { 225,2237 }, { 226,2237 }, { 227,2237 },
 { 228,2237 }, { 229,2237 }, { 230,2237 }, { 231,2237 }, { 232,2237 },
 { 233,2237 }, { 234,2237 }, { 235,2237 }, { 236,2237 }, { 237,2237 },
 { 238,2237 }, { 239,2237 }, { 240,2237 }, { 241,2237 }, { 242,2237 },
 { 243,2237 }, { 244,2237 }, { 245,2237 }, { 246,2237 }, { 247,2237 },

 { 248,2237 }, { 249,2237 }, { 250,2237 }, { 251,2237 }, { 252,2237 },
 { 253,2237 }, { 254,2237 }, { 255,2237 }, { 256,2237 }, {   0,   8 },
 {   0,3507 }, {   1,1979 }, {   2,1979 }, {   3,1979 }, {   4,1979 },
 {   5,1979 }, {   6,1979 }, {   7,1979 }, {   8,1979 }, {   9,1979 },
 {  10,-795 }, {  11,1979 }, {  12,1979 }, {  13,1979 }, {  14,1979 },
 {  15,1979 }, {  16,1979 }, {  17,1979 }, {  18,1979 }, {  19,1979 },
 {  20,1979 }, {  21,1979 }, {  22,1979 }, {  23,1979 }, {  24,1979 },
 {  25,1979 }, {  26,1979 }, {  27,1979 }, {  28,1979 }, {  29,1979 },
 {  30,1979 }, {  31,1979 }, {  32,1979 }, {  33,1979 }, {  34,1979 },
 {  35,1979 }, {  36,1979 }, {  37,1979 }, {  38,1979 }, {  39,1979 },

 {  40,1979 }, {  41,1979 }, {  42,1979 }, {  43,1979 }, {  44,1979 },
 {  45,1979 }, {  46,1979 }, {  47,1979 }, {  48,1979 }, {  49,1979 },
 {  50,1979 }, {  51,1979 }, {  52,1979 }, {  53,1979 }, {  54,1979 },
 {  55,1979 }, {  56,1979 }, {  57,1979 }, {  58,1979 }, {  59,1979 },
 {  60,1979 }, {  61,1979 }, {  62,1979 }, {  63,1979 }, {  64,1979 },
 {  65,1979 }, {  66,1979 }, {  67,1979 }, {  68,1979 }, {  69,1979 },
 {  70,1979 }, {  71,1979 }, {  72,1979 }, {  73,1979 }, {  74,1979 },
 {  75,1979 }, {  76,1979 }, {  77,1979 }, {  78,1979 }, {  79,1979 },
 {  80,1979 }, {  81,1979 }, {  82,1979 }, {  83,1979 }, {  84,1979 },
 {  85,1979 }, {  86,1979 }, {  87,1979 }, {  88,1979 }, {  89,1979 },

 {  90,1979 }, {  91,1979 }, {  92,1979 }, {  93,1979 }, {  94,1979 },
 {  95,1979 }, {  96,1979 }, {  97,1979 }, {  98,1979 }, {  99,1979 },
 { 100,1979 }, { 101,1979 }, { 102,1979 }, { 103,1979 }, { 104,1979 },
 { 105,1979 }, { 106,1979 }, { 107,1979 }, { 108,1979 }, { 109,1979 },
 { 110,1979 }, { 111,1979 }, { 112,1979 }, { 113,1979 }, { 114,1979 },
 { 115,1979 }, { 116,1979 }, { 117,1979 }, { 118,1979 }, { 119,1979 },
 { 120,1979 }, { 121,1979 }, { 122,1979 }, { 123,1979 }, { 124,1979 },
 { 125,1979 }, { 126,1979 }, { 127,1979 }, { 128,1979 }, { 129,1979 },
 { 130,1979 }, { 131,1979 }, { 132,1979 }, { 133,1979 }, { 134,1979 },
 { 135,1979 }, { 136,1979 }, { 137,1979 }, { 138,1979 }, { 139,1979 },

 { 140,1979 }, { 141,1979 }, { 142,1979 }, { 143,1979 }, { 144,1979 },
 { 145,1979 }, { 146,1979 }, { 147,1979 }, { 148,1979 }, { 149,1979 },
 { 150,1979 }, { 151,1979 }, { 152,1979 }, { 153,1979 }, { 154,1979 },
 { 155,1979 }, { 156,1979 }, { 157,1979 }, { 158,1979 }, { 159,1979 },
 { 160,1979 }, { 161,1979 }, { 162,1979 }, { 163,1979 }, { 164,1979 },
 { 165,1979 }, { 166,1979 }, { 167,1979 }, { 168,1979 }, { 169,1979 },
 { 170,1979 }, { 171,1979 }, { 172,1979 }, { 173,1979 }, { 174,1979 },
 { 175,1979 }, { 176,1979 }, { 177,1979 }, { 178,1979 }, { 179,1979 },
 { 180,1979 }, { 181,1979 }, { 182,1979 }, { 183,1979 }, { 184,1979 },
 { 185,1979 }, { 186,1979 }, { 187,1979 }, { 188,1979 }, { 189,1979 },

 { 190,1979 }, { 191,1979 }, { 192,1979 }, { 193,1979 }, { 194,1979 },
 { 195,1979 }, { 196,1979 }, { 197,1979 }, { 198,1979 }, { 199,1979 },
 { 200,1979 }, { 201,1979 }, { 202,1979 }, { 203,1979 }, { 204,1979 },
 { 205,1979 }, { 206,1979 }, { 207,1979 }, { 208,1979 }, { 209,1979 },
 { 210,1979 }, { 211,1979 }, { 212,1979 }, { 213,1979 }, { 214,1979 },
 { 215,1979 }, { 216,1979 }, { 217,1979 }, { 218,1979 }, { 219,1979 },
 { 220,1979 }, { 221,1979 }, { 222,1979 }, { 223,1979 }, { 224,1979 },
 { 225,1979 }, { 226,1979 }, { 227,1979 }, { 228,1979 }, { 229,1979 },
 { 230,1979 }, { 231,1979 }, { 232,1979 }, { 233,1979 }, { 234,1979 },
 { 235,1979 }, { 236,1979 }, { 237,1979 }, { 238,1979 }, { 239,1979 },

 { 240,1979 }, { 241,1979 }, { 242,1979 }, { 243,1979 }, { 244,1979 },
 { 245,1979 }, { 246,1979 }, { 247,1979 }, { 248,1979 }, { 249,1979 },
 { 250,1979 }, { 251,1979 }, { 252,1979 }, { 253,1979 }, { 254,1979 },
 { 255,1979 }, { 256,1979 }, {   0,  12 }, {   0,3249 }, {   1,1979 },
 {   2,1979 }, {   3,1979 }, {   4,1979 }, {   5,1979 }, {   6,1979 },
 {   7,1979 }, {   8,1979 }, {   9,1979 }, {  10,1979 }, {  11,1979 },
 {  12,1979 }, {  13,1979 }, {  14,1979 }, {  15,1979 }, {  16,1979 },
 {  17,1979 }, {  18,1979 }, {  19,1979 }, {  20,1979 }, {  21,1979 },
 {  22,1979 }, {  23,1979 }, {  24,1979 }, {  25,1979 }, {  26,1979 },
 {  27,1979 }, {  28,1979 }, {  29,1979 }, {  30,1979 }, {  31,1979 },

 {  32,1979 }, {  33,1979 }, {   0,   0 }, {  35,1979 }, {  36,1979 },
 {  37,1979 }, {  38,1979 }, {   0,   0 }, {  40,1979 }, {  41,1979 },
 {  42,1979 }, {  43,1979 }, {  44,1979 }, {  45,1979 }, {  46,1979 },
 {  47,1979 }, {  48,1979 }, {  49,1979 }, {  50,1979 }, {  51,1979 },
 {  52,1979 }, {  53,1979 }, {  54,1979 }, {  55,1979 }, {  56,1979 },
 {  57,1979 }, {  58,1979 }, {  59,1979 }, {  60,1979 }, {  61,1979 },
 {  62,1979 }, {  63,1979 }, {  64,1979 }, {  65,1979 }, {  66,1979 },
 {  67,1979 }, {  68,1979 }, {  69,1979 }, {  70,1979 }, {  71,1979 },
 {  72,1979 }, {  73,1979 }, {  74,1979 }, {  75,1979 }, {  76,1979 },
 {  77,1979 }, {  78,1979 }, {  79,1979 }, {  80,1979 }, {  81,1979 },

 {  82,1979 }, {  83,1979 }, {  84,1979 }, {  85,1979 }, {  86,1979 },
 {  87,1979 }, {  88,1979 }, {  89,1979 }, {  90,1979 }, {  91,1979 },
 {   0,   0 }, {  93,1979 }, {  94,1979 }, {  95,1979 }, {   0,   0 },
 {  97,1979 }, {  98,1979 }, {  99,1979 }, { 100,1979 }, { 101,1979 },
 { 102,1979 }, { 103,1979 }, { 104,1979 }, { 105,1979 }, { 106,1979 },
 { 107,1979 }, { 108,1979 }, { 109,1979 }, { 110,1979 }, { 111,1979 },
 { 112,1979 }, { 113,1979 }, { 114,1979 }, { 115,1979 }, { 116,1979 },
 { 117,1979 }, { 118,1979 }, { 119,1979 }, { 120,1979 }, { 121,1979 },
 { 122,1979 }, { 123,1979 }, { 124,1979 }, { 125,1979 }, { 126,1979 },
 { 127,1979 }, { 128,1979 }, { 129,1979 }, { 130,1979 }, { 131,1979 },

 { 132,1979 }, { 133,1979 }, { 134,1979 }, { 135,1979 }, { 136,1979 },
 { 137,1979 }, { 138,1979 }, { 139,1979 }, { 140,1979 }, { 141,1979 },
 { 142,1979 }, { 143,1979 }, { 144,1979 }, { 145,1979 }, { 146,1979 },
 { 147,1979 }, { 148,1979 }, { 149,1979 }, { 150,1979 }, { 151,1979 },
 { 152,1979 }, { 153,1979 }, { 154,1979 }, { 155,1979 }, { 156,1979 },
 { 157,1979 }, { 158,1979 }, { 159,1979 }, { 160,1979 }, { 161,1979 },
 { 162,1979 }, { 163,1979 }, { 164,1979 }, { 165,1979 }, { 166,1979 },
 { 167,1979 }, { 168,1979 }, { 169,1979 }, { 170,1979 }, { 171,1979 },
 { 172,1979 }, { 173,1979 }, { 174,1979 }, { 175,1979 }, { 176,1979 },
 { 177,1979 }, { 178,1979 }, { 179,1979 }, { 180,1979 }, { 181,1979 },

 { 182,1979 }, { 183,1979 }, { 184,1979 }, { 185,1979 }, { 186,1979 },
 { 187,1979 }, { 188,1979 }, { 189,1979 }, { 190,1979 }, { 191,1979 },
 { 192,1979 }, { 193,1979 }, { 194,1979 }, { 195,1979 }, { 196,1979 },
 { 197,1979 }, { 198,1979 }, { 199,1979 }, { 200,1979 }, { 201,1979 },
 { 202,1979 }, { 203,1979 }, { 204,1979 }, { 205,1979 }, { 206,1979 },
 { 207,1979 }, { 208,1979 }, { 209,1979 }, { 210,1979 }, { 211,1979 },
 { 212,1979 }, { 213,1979 }, { 214,1979 }, { 215,1979 }, { 216,1979 },
 { 217,1979 }, { 218,1979 }, { 219,1979 }, { 220,1979 }, { 221,1979 },
 { 222,1979 }, { 223,1979 }, { 224,1979 }, { 225,1979 }, { 226,1979 },
 { 227,1979 }, { 228,1979 }, { 229,1979 }, { 230,1979 }, { 231,1979 },

 { 232,1979 }, { 233,1979 }, { 234,1979 }, { 235,1979 }, { 236,1979 },
 { 237,1979 }, { 238,1979 }, { 239,1979 }, { 240,1979 }, { 241,1979 },
 { 242,1979 }, { 243,1979 }, { 244,1979 }, { 245,1979 }, { 246,1979 },
 { 247,1979 }, { 248,1979 }, { 249,1979 }, { 250,1979 }, { 251,1979 },
 { 252,1979 }, { 253,1979 }, { 254,1979 }, { 255,1979 }, { 256,1979 },
 {   0,  55 }, {   0,2991 }, {   1,-1306 }, {   2,-1306 }, {   3,-1306 },
 {   4,-1306 }, {   5,-1306 }, {   6,-1306 }, {   7,-1306 }, {   8,-1306 },
 {   9,-1306 }, {   0,   0 }, {  11,-1306 }, {  12,-1306 }, {  13,-1306 },
 {  14,-1306 }, {  15,-1306 }, {  16,-1306 }, {  17,-1306 }, {  18,-1306 },
 {  19,-1306 }, {  20,-1306 }, {  21,-1306 }, {  22,-1306 }, {  23,-1306 },

 {  24,-1306 }, {  25,-1306 }, {  26,-1306 }, {  27,-1306 }, {  28,-1306 },
 {  29,-1306 }, {  30,-1306 }, {  31,-1306 }, {  32,-1306 }, {  33,-1306 },
 {  34,-1306 }, {  35,-1306 }, {  36,-1306 }, {  37,-1306 }, {  38,-1306 },
 {  39,-1303 }, {  40,-1306 }, {  41,-1306 }, {  42,-1306 }, {  43,-1306 },
 {  44,-1306 }, {  45,-1306 }, {  46,-1306 }, {  47,-1306 }, {  48,-1306 },
 {  49,-1306 }, {  50,-1306 }, {  51,-1306 }, {  52,-1306 }, {  53,-1306 },
 {  54,-1306 }, {  55,-1306 }, {  56,-1306 }, {  57,-1306 }, {  58,-1306 },
 {  59,-1306 }, {  60,-1306 }, {  61,-1306 }, {  62,-1306 }, {  63,-1306 },
 {  64,-1306 }, {  65,-1306 }, {  66,-1306 }, {  67,-1306 }, {  68,-1306 },
 {  69,-1306 }, {  70,-1306 }, {  71,-1306 }, {  72,-1306 }, {  73,-1306 },

 {  74,-1306 }, {  75,-1306 }, {  76,-1306 }, {  77,-1306 }, {  78,-1306 },
 {  79,-1306 }, {  80,-1306 }, {  81,-1306 }, {  82,-1306 }, {  83,-1306 },
 {  84,-1306 }, {  85,-1306 }, {  86,-1306 }, {  87,-1306 }, {  88,-1306 },
 {  89,-1306 }, {  90,-1306 }, {  91,-1306 }, {  92,-1306 }, {  93,-1306 },
 {  94,-1306 }, {  95,-1306 }, {  96,-1306 }, {  97,-1306 }, {  98,-1306 },
 {  99,-1306 }, { 100,-1306 }, { 101,-1306 }, { 102,-1306 }, { 103,-1306 },
 { 104,-1306 }, { 105,-1306 }, { 106,-1306 }, { 107,-1306 }, { 108,-1306 },
 { 109,-1306 }, { 110,-1306 }, { 111,-1306 }, { 112,-1306 }, { 113,-1306 },
 { 114,-1306 }, { 115,-1306 }, { 116,-1306 }, { 117,-1306 }, { 118,-1306 },
 { 119,-1306 }, { 120,-1306 }, { 121,-1306 }, { 122,-1306 }, { 123,-1306 },

 { 124,-1306 }, { 125,-1306 }, { 126,-1306 }, { 127,-1306 }, { 128,-1306 },
 { 129,-1306 }, { 130,-1306 }, { 131,-1306 }, { 132,-1306 }, { 133,-1306 },
 { 134,-1306 }, { 135,-1306 }, { 136,-1306 }, { 137,-1306 }, { 138,-1306 },
 { 139,-1306 }, { 140,-1306 }, { 141,-1306 }, { 142,-1306 }, { 143,-1306 },
 { 144,-1306 }, { 145,-1306 }, { 146,-1306 }, { 147,-1306 }, { 148,-1306 },
 { 149,-1306 }, { 150,-1306 }, { 151,-1306 }, { 152,-1306 }, { 153,-1306 },
 { 154,-1306 }, { 155,-1306 }, { 156,-1306 }, { 157,-1306 }, { 158,-1306 },
 { 159,-1306 }, { 160,-1306 }, { 161,-1306 }, { 162,-1306 }, { 163,-1306 },
 { 164,-1306 }, { 165,-1306 }, { 166,-1306 }, { 167,-1306 }, { 168,-1306 },
 { 169,-1306 }, { 170,-1306 }, { 171,-1306 }, { 172,-1306 }, { 173,-1306 },

 { 174,-1306 }, { 175,-1306 }, { 176,-1306 }, { 177,-1306 }, { 178,-1306 },
 { 179,-1306 }, { 180,-1306 }, { 181,-1306 }, { 182,-1306 }, { 183,-1306 },
 { 184,-1306 }, { 185,-1306 }, { 186,-1306 }, { 187,-1306 }, { 188,-1306 },
 { 189,-1306 }, { 190,-1306 }, { 191,-1306 }, { 192,-1306 }, { 193,-1306 },
 { 194,-1306 }, { 195,-1306 }, { 196,-1306 }, { 197,-1306 }, { 198,-1306 },
 { 199,-1306 }, { 200,-1306 }, { 201,-1306 }, { 202,-1306 }, { 203,-1306 },
 { 204,-1306 }, { 205,-1306 }, { 206,-1306 }, { 207,-1306 }, { 208,-1306 },
 { 209,-1306 }, { 210,-1306 }, { 211,-1306 }, { 212,-1306 }, { 213,-1306 },
 { 214,-1306 }, { 215,-1306 }, { 216,-1306 }, { 217,-1306 }, { 218,-1306 },
 { 219,-1306 }, { 220,-1306 }, { 221,-1306 }, { 222,-1306 }, { 223,-1306 },

 { 224,-1306 }, { 225,-1306 }, { 226,-1306 }, { 227,-1306 }, { 228,-1306 },
 { 229,-1306 }, { 230,-1306 }, { 231,-1306 }, { 232,-1306 }, { 233,-1306 },
 { 234,-1306 }, { 235,-1306 }, { 236,-1306 }, { 237,-1306 }, { 238,-1306 },
 { 239,-1306 }, { 240,-1306 }, { 241,-1306 }, { 242,-1306 }, { 243,-1306 },
 { 244,-1306 }, { 245,-1306 }, { 246,-1306 }, { 247,-1306 }, { 248,-1306 },
 { 249,-1306 }, { 250,-1306 }, { 251,-1306 }, { 252,-1306 }, { 253,-1306 },
 { 254,-1306 }, { 255,-1306 }, { 256,-1306 }, {   0,  16 }, {   0,2733 },
 {   0,  20 }, {   0,2731 }, {   0,   0 }, {   0,2729 }, {   0,   3 },
 {   0,2727 }, {   0,   0 }, {   0,   0 }, {   9,   0 }, {  10,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  10,-1558 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  32,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  35,   0 }, {  36,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  46,  92 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {   0,   0 }, {   0,2639 }, {   0,   0 },
 {   0,   0 }, {  95,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },

 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,1627 }, {  49,1627 }, {  50,1627 }, {  51,1627 },
 {  52,1627 }, {  53,1627 }, {  54,1627 }, {  55,1627 }, {  56,1627 },
 {  57,1627 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  64,1719 }, {  65,1719 }, {  66,1719 },
 {  67,1719 }, {  68,1719 }, {  69,1719 }, {  70,1719 }, {  71,1719 },

 {  72,1719 }, {  73,1719 }, {  74,1719 }, {  75,1719 }, {  76,1719 },
 {  77,1719 }, {  78,1719 }, {  79,1719 }, {  80,1719 }, {  81,1719 },
 {  82,1719 }, {  83,1719 }, {  84,1719 }, {  85,1719 }, {  86,1719 },
 {  87,1719 }, {  88,1719 }, {  89,1719 }, {  90,1719 }, {   0,   0 },
 {   0,2547 }, {   0,   0 }, {   0,   0 }, {  95,1719 }, {   0,   0 },
 {  97,1719 }, {  98,1719 }, {  99,1719 }, { 100,1719 }, { 101,1719 },
 { 102,1719 }, { 103,1719 }, { 104,1719 }, { 105,1719 }, { 106,1719 },
 { 107,1719 }, { 108,1719 }, { 109,1719 }, { 110,1719 }, { 111,1719 },
 { 112,1719 }, { 113,1719 }, { 114,1719 }, { 115,1719 }, { 116,1719 },
 { 117,1719 }, { 118,1719 }, { 119,1719 }, { 120,1719 }, { 121,1719 },

 { 122,1719 }, {   0,  23 }, {   0,2515 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,2505 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,1719 }, {  49,1719 },
 {  50,1719 }, {  51,1719 }, {  52,1719 }, {  53,1719 }, {  54,1719 },
 {  55,1719 }, {  56,1719 }, {  57,1719 }, {   0,  22 }, {   0,2488 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  24 }, {   0,2478 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  46, -32 }, {   0,   0 },

 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {  48,1719 }, {  49,1719 }, {  50,1719 }, {  51,1719 }, {  52,1719 },
 {  53,1719 }, {  54,1719 }, {  55,1719 }, {  56,1719 }, {  57,1719 },
 {   0,   0 }, {  69,1719 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  46, -17 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {  69,1724 }, {   0,   0 },

 {   0,2417 }, {   0,   0 }, {   0,   0 }, { 101,1719 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  69,  95 }, {   0,   0 },
 {   0,   0 }, {   0,  21 }, {   0,2405 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 101,1724 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,2383 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 101,  95 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, -61 }, {  49, -61 },

 {  50, -61 }, {  51, -61 }, {  52, -61 }, {  53, -61 }, {  54, -61 },
 {  55, -61 }, {  56, -61 }, {  57, -61 }, {  46, -12 }, {   0,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  43,1629 }, {   0,   0 }, {  45,1629 },
 {   0,   0 }, {  69,  22 }, {  48,1658 }, {  49,1658 }, {  50,1658 },
 {  51,1658 }, {  52,1658 }, {  53,1658 }, {  54,1658 }, {  55,1658 },
 {  56,1658 }, {  57,1658 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 101,  22 }, {   0,   5 },
 {   0,2302 }, {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 },
 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 },
 {  10,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 },
 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },
 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },
 {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 },

 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {  40,   0 }, {  41,   0 }, {   0,   0 }, {  43,   0 }, {  44,   0 },
 {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 },
 {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },

 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 },
 {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 },
 { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 },
 { 130,   0 }, { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 },

 { 135,   0 }, { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 },
 { 140,   0 }, { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 },
 { 145,   0 }, { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 },
 { 150,   0 }, { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 },
 { 155,   0 }, { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 },
 { 160,   0 }, { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 },
 { 165,   0 }, { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 },
 { 170,   0 }, { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 },
 { 175,   0 }, { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 },
 { 180,   0 }, { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 },

 { 185,   0 }, { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 },
 { 190,   0 }, { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 },
 { 195,   0 }, { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 },
 { 200,   0 }, { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 },
 { 205,   0 }, { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 },
 { 210,   0 }, { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 },
 { 215,   0 }, { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 },
 { 220,   0 }, { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 },
 { 225,   0 }, { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 },
 { 230,   0 }, { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 },

 { 235,   0 }, { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 },
 { 240,   0 }, { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 },
 { 245,   0 }, { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 },
 { 250,   0 }, { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 },
 { 255,   0 }, { 256,   0 }, {   0,   6 }, {   0,2044 }, {   1,   0 },
 {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },

 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {   0,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 }, {  61,   0 },
 {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },

 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 },
 {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },
 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },
 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 },

 { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 }, { 131,   0 },
 { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 }, { 136,   0 },
 { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 }, { 141,   0 },
 { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 }, { 146,   0 },
 { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 }, { 151,   0 },
 { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 }, { 156,   0 },
 { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 }, { 161,   0 },
 { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 }, { 166,   0 },
 { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 }, { 171,   0 },
 { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 }, { 176,   0 },

 { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 }, { 181,   0 },
 { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 }, { 186,   0 },
 { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 }, { 191,   0 },
 { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 }, { 196,   0 },
 { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 }, { 201,   0 },
 { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 }, { 206,   0 },
 { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 }, { 211,   0 },
 { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 }, { 216,   0 },
 { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 }, { 221,   0 },
 { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 }, { 226,   0 },

 { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 }, { 231,   0 },
 { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 }, { 236,   0 },
 { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 }, { 241,   0 },
 { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 }, { 246,   0 },
 { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 }, { 251,   0 },
 { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 }, { 256,   0 },
 {   0,   6 }, {   0,1786 }, {   1,-258 }, {   2,-258 }, {   3,-258 },
 {   4,-258 }, {   5,-258 }, {   6,-258 }, {   7,-258 }, {   8,-258 },
 {   9,-258 }, {  10,-258 }, {  11,-258 }, {  12,-258 }, {  13,-258 },
 {  14,-258 }, {  15,-258 }, {  16,-258 }, {  17,-258 }, {  18,-258 },

 {  19,-258 }, {  20,-258 }, {  21,-258 }, {  22,-258 }, {  23,-258 },
 {  24,-258 }, {  25,-258 }, {  26,-258 }, {  27,-258 }, {  28,-258 },
 {  29,-258 }, {  30,-258 }, {  31,-258 }, {  32,-258 }, {  33,-258 },
 {  34,-258 }, {  35,-258 }, {  36,-258 }, {  37,-258 }, {  38,-258 },
 {  39,-258 }, {  40,-258 }, {  41,-258 }, {  42,   0 }, {  43,-258 },
 {  44,-258 }, {  45,-258 }, {  46,-258 }, {  47,-2518 }, {  48,-258 },
 {  49,-258 }, {  50,-258 }, {  51,-258 }, {  52,-258 }, {  53,-258 },
 {  54,-258 }, {  55,-258 }, {  56,-258 }, {  57,-258 }, {  58,-258 },
 {  59,-258 }, {  60,-258 }, {  61,-258 }, {  62,-258 }, {  63,-258 },
 {  64,-258 }, {  65,-258 }, {  66,-258 }, {  67,-258 }, {  68,-258 },

 {  69,-258 }, {  70,-258 }, {  71,-258 }, {  72,-258 }, {  73,-258 },
 {  74,-258 }, {  75,-258 }, {  76,-258 }, {  77,-258 }, {  78,-258 },
 {  79,-258 }, {  80,-258 }, {  81,-258 }, {  82,-258 }, {  83,-258 },
 {  84,-258 }, {  85,-258 }, {  86,-258 }, {  87,-258 }, {  88,-258 },
 {  89,-258 }, {  90,-258 }, {  91,-258 }, {  92,-258 }, {  93,-258 },
 {  94,-258 }, {  95,-258 }, {  96,-258 }, {  97,-258 }, {  98,-258 },
 {  99,-258 }, { 100,-258 }, { 101,-258 }, { 102,-258 }, { 103,-258 },
 { 104,-258 }, { 105,-258 }, { 106,-258 }, { 107,-258 }, { 108,-258 },
 { 109,-258 }, { 110,-258 }, { 111,-258 }, { 112,-258 }, { 113,-258 },
 { 114,-258 }, { 115,-258 }, { 116,-258 }, { 117,-258 }, { 118,-258 },

 { 119,-258 }, { 120,-258 }, { 121,-258 }, { 122,-258 }, { 123,-258 },
 { 124,-258 }, { 125,-258 }, { 126,-258 }, { 127,-258 }, { 128,-258 },
 { 129,-258 }, { 130,-258 }, { 131,-258 }, { 132,-258 }, { 133,-258 },
 { 134,-258 }, { 135,-258 }, { 136,-258 }, { 137,-258 }, { 138,-258 },
 { 139,-258 }, { 140,-258 }, { 141,-258 }, { 142,-258 }, { 143,-258 },
 { 144,-258 }, { 145,-258 }, { 146,-258 }, { 147,-258 }, { 148,-258 },
 { 149,-258 }, { 150,-258 }, { 151,-258 }, { 152,-258 }, { 153,-258 },
 { 154,-258 }, { 155,-258 }, { 156,-258 }, { 157,-258 }, { 158,-258 },
 { 159,-258 }, { 160,-258 }, { 161,-258 }, { 162,-258 }, { 163,-258 },
 { 164,-258 }, { 165,-258 }, { 166,-258 }, { 167,-258 }, { 168,-258 },

 { 169,-258 }, { 170,-258 }, { 171,-258 }, { 172,-258 }, { 173,-258 },
 { 174,-258 }, { 175,-258 }, { 176,-258 }, { 177,-258 }, { 178,-258 },
 { 179,-258 }, { 180,-258 }, { 181,-258 }, { 182,-258 }, { 183,-258 },
 { 184,-258 }, { 185,-258 }, { 186,-258 }, { 187,-258 }, { 188,-258 },
 { 189,-258 }, { 190,-258 }, { 191,-258 }, { 192,-258 }, { 193,-258 },
 { 194,-258 }, { 195,-258 }, { 196,-258 }, { 197,-258 }, { 198,-258 },
 { 199,-258 }, { 200,-258 }, { 201,-258 }, { 202,-258 }, { 203,-258 },
 { 204,-258 }, { 205,-258 }, { 206,-258 }, { 207,-258 }, { 208,-258 },
 { 209,-258 }, { 210,-258 }, { 211,-258 }, { 212,-258 }, { 213,-258 },
 { 214,-258 }, { 215,-258 }, { 216,-258 }, { 217,-258 }, { 218,-258 },

 { 219,-258 }, { 220,-258 }, { 221,-258 }, { 222,-258 }, { 223,-258 },
 { 224,-258 }, { 225,-258 }, { 226,-258 }, { 227,-258 }, { 228,-258 },
 { 229,-258 }, { 230,-258 }, { 231,-258 }, { 232,-258 }, { 233,-258 },
 { 234,-258 }, { 235,-258 }, { 236,-258 }, { 237,-258 }, { 238,-258 },
 { 239,-258 }, { 240,-258 }, { 241,-258 }, { 242,-258 }, { 243,-258 },
 { 244,-258 }, { 245,-258 }, { 246,-258 }, { 247,-258 }, { 248,-258 },
 { 249,-258 }, { 250,-258 }, { 251,-258 }, { 252,-258 }, { 253,-258 },
 { 254,-258 }, { 255,-258 }, { 256,-258 }, {   0,   8 }, {   0,1528 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 }, {   0,   0 },

 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },
 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 },
 {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },

 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },

 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 },
 { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 },
 { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 },
 { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 },
 { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 },
 { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 },
 { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 },

 { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 },
 { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 },
 { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 },
 { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 },
 { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 },
 { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 },
 { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 },
 { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 },
 { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 },
 { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 },

 { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 },
 { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 },
 { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 },
 { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 },
 { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 },
 { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 },
 { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 },
 { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 },
 { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 },
 { 256,   0 }, {   0,  12 }, {   0,1270 }, {   1,   0 }, {   2,   0 },

 {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 },
 {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 },
 {  33,   0 }, {   0,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {   0,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 },
 {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },

 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {  58,   0 }, {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 },
 {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 },
 {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 },
 {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 },
 {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 },
 {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 },
 {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 }, {   0,   0 },
 {  93,   0 }, {  94,   0 }, {  95,   0 }, {   0,   0 }, {  97,   0 },
 {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 },

 { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 },
 { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 },
 { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 },
 { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 },
 { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 },
 { 128,   0 }, { 129,   0 }, { 130,   0 }, { 131,   0 }, { 132,   0 },
 { 133,   0 }, { 134,   0 }, { 135,   0 }, { 136,   0 }, { 137,   0 },
 { 138,   0 }, { 139,   0 }, { 140,   0 }, { 141,   0 }, { 142,   0 },
 { 143,   0 }, { 144,   0 }, { 145,   0 }, { 146,   0 }, { 147,   0 },
 { 148,   0 }, { 149,   0 }, { 150,   0 }, { 151,   0 }, { 152,   0 },

 { 153,   0 }, { 154,   0 }, { 155,   0 }, { 156,   0 }, { 157,   0 },
 { 158,   0 }, { 159,   0 }, { 160,   0 }, { 161,   0 }, { 162,   0 },
 { 163,   0 }, { 164,   0 }, { 165,   0 }, { 166,   0 }, { 167,   0 },
 { 168,   0 }, { 169,   0 }, { 170,   0 }, { 171,   0 }, { 172,   0 },
 { 173,   0 }, { 174,   0 }, { 175,   0 }, { 176,   0 }, { 177,   0 },
 { 178,   0 }, { 179,   0 }, { 180,   0 }, { 181,   0 }, { 182,   0 },
 { 183,   0 }, { 184,   0 }, { 185,   0 }, { 186,   0 }, { 187,   0 },
 { 188,   0 }, { 189,   0 }, { 190,   0 }, { 191,   0 }, { 192,   0 },
 { 193,   0 }, { 194,   0 }, { 195,   0 }, { 196,   0 }, { 197,   0 },
 { 198,   0 }, { 199,   0 }, { 200,   0 }, { 201,   0 }, { 202,   0 },

 { 203,   0 }, { 204,   0 }, { 205,   0 }, { 206,   0 }, { 207,   0 },
 { 208,   0 }, { 209,   0 }, { 210,   0 }, { 211,   0 }, { 212,   0 },
 { 213,   0 }, { 214,   0 }, { 215,   0 }, { 216,   0 }, { 217,   0 },
 { 218,   0 }, { 219,   0 }, { 220,   0 }, { 221,   0 }, { 222,   0 },
 { 223,   0 }, { 224,   0 }, { 225,   0 }, { 226,   0 }, { 227,   0 },
 { 228,   0 }, { 229,   0 }, { 230,   0 }, { 231,   0 }, { 232,   0 },
 { 233,   0 }, { 234,   0 }, { 235,   0 }, { 236,   0 }, { 237,   0 },
 { 238,   0 }, { 239,   0 }, { 240,   0 }, { 241,   0 }, { 242,   0 },
 { 243,   0 }, { 244,   0 }, { 245,   0 }, { 246,   0 }, { 247,   0 },
 { 248,   0 }, { 249,   0 }, { 250,   0 }, { 251,   0 }, { 252,   0 },

 { 253,   0 }, { 254,   0 }, { 255,   0 }, { 256,   0 }, {   0,   0 },
 {   0,1012 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  64,  92 },
 {  65,  92 }, {  66,  92 }, {  67,  92 }, {  68,  92 }, {  69,  92 },
 {  70,  92 }, {  71,  92 }, {  72,  92 }, {  73,  92 }, {  74,  92 },
 {  75,  92 }, {  76,  92 }, {  77,  92 }, {  78,  92 }, {  79,  92 },
 {  80,  92 }, {  81,  92 }, {  82,  92 }, {  83,  92 }, {  84,  92 },
 {  85,  92 }, {  86,  92 }, {  87,  92 }, {  88,  92 }, {  89,  92 },
 {  90,  92 }, {   0,  20 }, {   0, 920 }, {   0,   0 }, {   0,   0 },

 {  95,  92 }, {   0,   0 }, {  97,  92 }, {  98,  92 }, {  99,  92 },
 { 100,  92 }, { 101,  92 }, { 102,  92 }, { 103,  92 }, { 104,  92 },
 { 105,  92 }, { 106,  92 }, { 107,  92 }, { 108,  92 }, { 109,  92 },
 { 110,  92 }, { 111,  92 }, { 112,  92 }, { 113,  92 }, { 114,  92 },
 { 115,  92 }, { 116,  92 }, { 117,  92 }, { 118,  92 }, { 119,  92 },
 { 120,  92 }, { 121,  92 }, { 122,  92 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  46, 225 }, {   0,   0 },
 {  48, 317 }, {  49, 317 }, {  50, 317 }, {  51, 317 }, {  52, 317 },

 {  53, 317 }, {  54, 317 }, {  55, 317 }, {  56, 317 }, {  57, 317 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  64, 317 }, {  65, 317 }, {  66, 317 }, {  67, 317 },
 {  68, 317 }, {  69, 317 }, {  70, 317 }, {  71, 317 }, {  72, 317 },
 {  73, 317 }, {  74, 317 }, {  75, 317 }, {  76, 317 }, {  77, 317 },
 {  78, 317 }, {  79, 317 }, {  80, 317 }, {  81, 317 }, {  82, 317 },
 {  83, 317 }, {  84, 317 }, {  85, 317 }, {  86, 317 }, {  87, 317 },
 {  88, 317 }, {  89, 317 }, {  90, 317 }, {   0,  26 }, {   0, 828 },
 {   0,   0 }, {   0,   0 }, {  95, 317 }, {   0,   0 }, {  97, 317 },
 {  98, 317 }, {  99, 317 }, { 100, 317 }, { 101, 317 }, { 102, 317 },

 { 103, 317 }, { 104, 317 }, { 105, 317 }, { 106, 317 }, { 107, 317 },
 { 108, 317 }, { 109, 317 }, { 110, 317 }, { 111, 317 }, { 112, 317 },
 { 113, 317 }, { 114, 317 }, { 115, 317 }, { 116, 317 }, { 117, 317 },
 { 118, 317 }, { 119, 317 }, { 120, 317 }, { 121, 317 }, { 122, 317 },
 {   0,   0 }, {   0, 796 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,  25 }, {   0, 786 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0, 764 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  69,  32 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0, 754 }, {  43, 285 },
 {   0,   0 }, {  45, 285 }, {   0,   0 }, {   0,   0 }, {  48, 317 },
 {  49, 317 }, {  50, 317 }, {  51, 317 }, {  52, 317 }, {  53, 317 },
 {  54, 317 }, {  55, 317 }, {  56, 317 }, {  57, 317 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 { 101,  32 }, {   0,  17 }, {   0, 725 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  43, 295 }, {   0,   0 }, {  45, 295 }, {   0,   0 },

 {  69,  22 }, {  48, 312 }, {  49, 312 }, {  50, 312 }, {  51, 312 },
 {  52, 312 }, {  53, 312 }, {  54, 312 }, {  55, 312 }, {  56, 312 },
 {  57, 312 }, {  48,  29 }, {  49,  29 }, {  50,  29 }, {  51,  29 },
 {  52,  29 }, {  53,  29 }, {  54,  29 }, {  55,  29 }, {  56,  29 },
 {  57,  29 }, {   0,   0 }, {   0, 695 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 101,  22 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48, 253 }, {  49, 253 }, {  50, 253 }, {  51, 253 }, {  52, 253 },
 {  53, 253 }, {  54, 253 }, {  55, 253 }, {  56, 253 }, {  57, 253 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  64, 345 }, {  65, 345 }, {  66, 345 }, {  67, 345 },
 {  68, 345 }, {  69, 345 }, {  70, 345 }, {  71, 345 }, {  72, 345 },
 {  73, 345 }, {  74, 345 }, {  75, 345 }, {  76, 345 }, {  77, 345 },

 {  78, 345 }, {  79, 345 }, {  80, 345 }, {  81, 345 }, {  82, 345 },
 {  83, 345 }, {  84, 345 }, {  85, 345 }, {  86, 345 }, {  87, 345 },
 {  88, 345 }, {  89, 345 }, {  90, 345 }, {   0,  20 }, {   0, 603 },
 {   0,   0 }, {   0,   0 }, {  95, 345 }, {   0,   0 }, {  97, 345 },
 {  98, 345 }, {  99, 345 }, { 100, 345 }, { 101, 345 }, { 102, 345 },
 { 103, 345 }, { 104, 345 }, { 105, 345 }, { 106, 345 }, { 107, 345 },
 { 108, 345 }, { 109, 345 }, { 110, 345 }, { 111, 345 }, { 112, 345 },
 { 113, 345 }, { 114, 345 }, { 115, 345 }, { 116, 345 }, { 117, 345 },
 { 118, 345 }, { 119, 345 }, { 120, 345 }, { 121, 345 }, { 122, 345 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  46, -92 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },

 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {   0,   0 }, {   0, 511 }, {   0,   0 }, {   0,   0 }, {  95,   0 },
 {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, {   0,  19 }, {   0, 479 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0, 469 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,  32 },
 {  49,  32 }, {  50,  32 }, {  51,  32 }, {  52,  32 }, {  53,  32 },
 {  54,  32 }, {  55,  32 }, {  56,  32 }, {  57,  32 }, {   0,  18 },
 {   0, 452 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0, 442 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  48,  17 }, {  49,  17 }, {  50,  17 }, {  51,  17 },

 {  52,  17 }, {  53,  17 }, {  54,  17 }, {  55,  17 }, {  56,  17 },
 {  57,  17 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  64,  92 },
 {  65,  92 }, {  66,  92 }, {  67,  92 }, {  68,  92 }, {  69,  92 },
 {  70,  92 }, {  71,  92 }, {  72,  92 }, {  73,  92 }, {  74,  92 },

 {  75,  92 }, {  76,  92 }, {  77,  92 }, {  78,  92 }, {  79,  92 },
 {  80,  92 }, {  81,  92 }, {  82,  92 }, {  83,  92 }, {  84,  92 },
 {  85,  92 }, {  86,  92 }, {  87,  92 }, {  88,  92 }, {  89,  92 },
 {  90,  92 }, {   0,  20 }, {   0, 350 }, {   0,   0 }, {   0,   0 },
 {  95,  92 }, {   0,   0 }, {  97,  92 }, {  98,  92 }, {  99,  92 },
 { 100,  92 }, { 101,  92 }, { 102,  92 }, { 103,  92 }, { 104,  92 },
 { 105,  92 }, { 106,  92 }, { 107,  92 }, { 108,  92 }, { 109,  92 },
 { 110,  92 }, { 111,  92 }, { 112,  92 }, { 113,  92 }, { 114,  92 },
 { 115,  92 }, { 116,  92 }, { 117,  92 }, { 118,  92 }, { 119,  92 },
 { 120,  92 }, { 121,  92 }, { 122,  92 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,  92 }, {  49,  92 }, {  50,  92 }, {  51,  92 }, {  52,  92 },
 {  53,  92 }, {  54,  92 }, {  55,  92 }, {  56,  92 }, {  57,  92 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  64,  92 }, {  65,  92 }, {  66,  92 }, {  67,  92 },
 {  68,  92 }, {  69,  92 }, {  70,  92 }, {  71,  92 }, {  72,  92 },
 {  73,  92 }, {  74,  92 }, {  75,  92 }, {  76,  92 }, {  77,  92 },
 {  78,  92 }, {  79,  92 }, {  80,  92 }, {  81,  92 }, {  82,  92 },

 {  83,  92 }, {  84,  92 }, {  85,  92 }, {  86,  92 }, {  87,  92 },
 {  88,  92 }, {  89,  92 }, {  90,  92 }, {   0,  20 }, {   0, 258 },
 {   0,   0 }, {   0,   0 }, {  95,  92 }, {   0,   0 }, {  97,  92 },
 {  98,  92 }, {  99,  92 }, { 100,  92 }, { 101,  92 }, { 102,  92 },
 { 103,  92 }, { 104,  92 }, { 105,  92 }, { 106,  92 }, { 107,  92 },
 { 108,  92 }, { 109,  92 }, { 110,  92 }, { 111,  92 }, { 112,  92 },
 { 113,  92 }, { 114,  92 }, { 115,  92 }, { 116,  92 }, { 117,  92 },
 { 118,  92 }, { 119,  92 }, { 120,  92 }, { 121,  92 }, { 122,  92 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,   0 },
 {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 257,  56 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[9] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],
    &yy_transition[519],
    &yy_transition[777],
    &yy_transition[1035],
    &yy_transition[1293],
    &yy_transition[1551],
    &yy_transition[1809],

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() (yyg->yy_more_flag = 1)
#define YY_MORE_ADJ yyg->yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sql-tokenizer2.l"
#line 2 "sql-tokenizer2.l"
/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2010, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */


#include <string.h>

#include "sqlparser.h"

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#ifdef WIN32
#include <io.h>  /* for read */
#endif
#include <stdlib.h>

#define YY_DECL int sql_tokenizer_internal(SqlParser* result, yyscan_t yyscanner)

#define GE_STR_LITERAL_WITH_LEN(str) str, sizeof(str) - 1
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#line 1899 "sqlparser_lex.cpp"

#define INITIAL 0
#define COMMENT 1
#define LINECOMMENT 2
#define QUOTED 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

int yyget_column  (yyscan_t yyscanner );

void yyset_column (int column_no ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 57 "sql-tokenizer2.l"


    char quote_char = 0;
    sql_token_id quote_token_id = TK_UNKNOWN;
    sql_token_id comment_token_id = TK_UNKNOWN;


#line 2117 "sqlparser_lex.cpp"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yyg->yy_more_len = 0;
		if ( yyg->yy_more_flag )
			{
			yyg->yy_more_len = yyg->yy_c_buf_p - yyg->yytext_ptr;
			yyg->yy_more_flag = 0;
			}
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yyg->yy_start];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos + 1;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 64 "sql-tokenizer2.l"
comment_token_id = TK_COMMENT;       result->appendToken(comment_token_id, GE_STR_LITERAL_WITH_LEN(""));
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "sql-tokenizer2.l"
comment_token_id = TK_COMMENT;       result->appendToken(comment_token_id, GE_STR_LITERAL_WITH_LEN("")); BEGIN(COMMENT);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 66 "sql-tokenizer2.l"
comment_token_id = TK_COMMENT_MYSQL; result->appendToken(comment_token_id, GE_STR_LITERAL_WITH_LEN("")); BEGIN(COMMENT);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 67 "sql-tokenizer2.l"
comment_token_id = TK_COMMENT;		 result->appendToken(comment_token_id, GE_STR_LITERAL_WITH_LEN("")); BEGIN(LINECOMMENT);
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 68 "sql-tokenizer2.l"
result->appendTokenToLast(yytext, yyleng);
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 69 "sql-tokenizer2.l"
result->appendTokenToLast(yytext, yyleng);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 70 "sql-tokenizer2.l"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 71 "sql-tokenizer2.l"
BEGIN(INITIAL);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 72 "sql-tokenizer2.l"
result->appendTokenToLast(yytext, yyleng);
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 73 "sql-tokenizer2.l"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
#line 74 "sql-tokenizer2.l"
BEGIN(INITIAL);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 76 "sql-tokenizer2.l"
{ BEGIN(QUOTED);  
		quote_char = *yytext; 
		switch (quote_char) { 
		case '\'': quote_token_id = TK_STRING; break; 
		case '"': quote_token_id = TK_LITERAL; break; 
		case '`': quote_token_id = TK_LITERAL; break; 
		} 
		result->appendToken(quote_token_id, GE_STR_LITERAL_WITH_LEN("")); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 85 "sql-tokenizer2.l"
yymore(); /** add by huih@20160204 */
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 86 "sql-tokenizer2.l"
result->appendTokenToLast(yytext, yyleng); /** all non quote or esc chars are passed through */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 87 "sql-tokenizer2.l"
result->appendTokenToLast(yytext, yyleng); /** add escaping */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 88 "sql-tokenizer2.l"
{ if (yytext[0] == yytext[1] && yytext[1] == quote_char) { 
                result->appendTokenToLast(yytext, yyleng);  /** doubling quotes */
			} else {
				/** pick the first char and put the second back to parsing */
				yyless(1);
				result->appendTokenToLast(yytext, yyleng);
			}
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 96 "sql-tokenizer2.l"
if (*yytext == quote_char) { BEGIN(INITIAL); } else { result->appendTokenToLast(yytext, yyleng); }
	YY_BREAK
case YY_STATE_EOF(QUOTED):
#line 97 "sql-tokenizer2.l"
BEGIN(INITIAL);
	YY_BREAK
/** strings, quoting, literals */
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 100 "sql-tokenizer2.l"
/** ignore WS */
	YY_BREAK
/* unquoted literals (and function names) are
	 * 
	 *   all alpha-nums that are not digits-only and NOT floats
	 *
	 * Floats are
	 *   1.1
	 *   1e+1
	 *   1.1e+1
	 *   .1e+1
	 * unquoted literals:
	 *   e1
	 *   1e
	 * complex cases
	 *   1e + 1 is a literal ("1e"), a plus ("+") and integer ("1")
	 *   1e+1e  is a float ("1e+1") and a literal ("e")
	 *   compare this to 1.1e which is INVALID (a broken scientific notation)
	 */
case 17:
YY_RULE_SETUP
#line 119 "sql-tokenizer2.l"
result->appendToken(TK_FLOAT, yytext, yyleng);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 120 "sql-tokenizer2.l"
result->appendToken(TK_FLOAT, yytext, yyleng);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 121 "sql-tokenizer2.l"
result->appendToken(TK_FLOAT, yytext, yyleng);
	YY_BREAK
/* literals
	 * - be greedy and capture specifiers made up of up to 3 literals: lit.lit.lit
	 * - if it has a dot, split it into 3 tokens: lit dot lit
	 *
	 * when it comes to dots in specifiers spaces matter:
	 *   e1 . 1e + 1
	 *   e1.1e + 1
	 *   e1.1e+1 are all a literal ("e1"), a dot, a literal ("1e"), a plus and a integer ("1")
	 * but 
	 *   e1. 1e+1 is invalid as it is a literal ("e1"), a dot and a float ("1e+1")
	 */
case 20:
YY_RULE_SETUP
#line 133 "sql-tokenizer2.l"
{
		char *cur, *tk_start = yytext;
		int tk_len;

		for (cur = yytext; cur < yytext + yyleng; cur++) {
			if (*cur == '.') {
				tk_len = cur - tk_start;

				result->appendToken(SqlParser::tokenIdByName(tk_start, tk_len), tk_start, tk_len);
                result->appendToken(TK_DOT, GE_STR_LITERAL_WITH_LEN("."));
				tk_start = cur + 1;
			}
		}
		/* copy the rest */
		tk_len = yytext + yyleng - tk_start;
		result->appendToken(SqlParser::tokenIdByName(tk_start, tk_len), tk_start, tk_len);
	}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 150 "sql-tokenizer2.l"
result->appendToken(TK_INTEGER, yytext, yyleng);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 151 "sql-tokenizer2.l"
result->appendToken(TK_INTEGER, yytext, yyleng);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 152 "sql-tokenizer2.l"
result->appendToken(TK_INTEGER, yytext, yyleng);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 153 "sql-tokenizer2.l"
result->appendToken(TK_FLOAT, yytext, yyleng);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 154 "sql-tokenizer2.l"
result->appendToken(TK_FLOAT, yytext, yyleng);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 155 "sql-tokenizer2.l"
result->appendToken(TK_FLOAT, yytext, yyleng);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 156 "sql-tokenizer2.l"
result->appendToken(TK_COMMA, yytext, yyleng);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 157 "sql-tokenizer2.l"
result->appendToken(TK_DOT, yytext, yyleng);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 158 "sql-tokenizer2.l"
result->appendToken(TK_LT, yytext, yyleng);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 159 "sql-tokenizer2.l"
result->appendToken(TK_GT, yytext, yyleng);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 160 "sql-tokenizer2.l"
result->appendToken(TK_LE, yytext, yyleng);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 161 "sql-tokenizer2.l"
result->appendToken(TK_GE, yytext, yyleng);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 162 "sql-tokenizer2.l"
result->appendToken(TK_EQ, yytext, yyleng);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 163 "sql-tokenizer2.l"
result->appendToken(TK_NE, yytext, yyleng);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 164 "sql-tokenizer2.l"
result->appendToken(TK_NE, yytext, yyleng);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 165 "sql-tokenizer2.l"
result->appendToken(TK_OBRACE, yytext, yyleng);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 166 "sql-tokenizer2.l"
result->appendToken(TK_CBRACE, yytext, yyleng);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 167 "sql-tokenizer2.l"
//old: sql_append_remailSqlList(tokens, remailSqlList);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 168 "sql-tokenizer2.l"
result->appendToken(TK_ASSIGN, yytext, yyleng);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 169 "sql-tokenizer2.l"
result->appendToken(TK_STAR, yytext, yyleng);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 170 "sql-tokenizer2.l"
result->appendToken(TK_PLUS, yytext, yyleng);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 171 "sql-tokenizer2.l"
result->appendToken(TK_DIV, yytext, yyleng);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 172 "sql-tokenizer2.l"
result->appendToken(TK_MINUS, yytext, yyleng);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 173 "sql-tokenizer2.l"
result->appendToken(TK_BITWISE_AND, yytext, yyleng);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 174 "sql-tokenizer2.l"
result->appendToken(TK_LOGICAL_AND, yytext, yyleng);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 175 "sql-tokenizer2.l"
result->appendToken(TK_BITWISE_OR, yytext, yyleng);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 176 "sql-tokenizer2.l"
result->appendToken(TK_LOGICAL_OR, yytext, yyleng);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 177 "sql-tokenizer2.l"
result->appendToken(TK_BITWISE_XOR, yytext, yyleng);
	YY_BREAK
/*"$"[[:digit:]]+					//old: sql_token_replace_append_len(tokens, values, TK_STRING, yytext, yyleng); */
case 49:
YY_RULE_SETUP
#line 179 "sql-tokenizer2.l"
result->appendToken(TK_SQL_ACTIONSCOPE, yytext, yyleng);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 180 "sql-tokenizer2.l"
result->appendToken(TK_SQL_MATCHREGEXCASE, yytext, yyleng);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 181 "sql-tokenizer2.l"
result->appendToken(TK_SQL_MATCHREGEXNOCASE, yytext, yyleng);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 182 "sql-tokenizer2.l"
result->appendToken(TK_SQL_NOMATCHREGEXCASE, yytext, yyleng);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 183 "sql-tokenizer2.l"
result->appendToken(TK_SQL_NOMATCHREGEXNOCASE, yytext, yyleng);
	YY_BREAK
/** the default rule */
case 54:
YY_RULE_SETUP
#line 186 "sql-tokenizer2.l"
result->appendToken(TK_UNKNOWN, yytext, yyleng);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 188 "sql-tokenizer2.l"
ECHO;
	YY_BREAK
#line 2555 "sqlparser_lex.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yy_start_state_list[yyg->yy_start];

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register int yy_c = 256;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer((yy_buffer_state*)YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer((yy_buffer_state*)YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer((yy_buffer_state*)YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 187 "sql-tokenizer2.l"



int SqlParser::parseToken(const char *str, int len)
{
    YY_BUFFER_STATE state;
    yyscan_t yyscaner = NULL;
    int ret;

    yylex_init(&yyscaner);
    state = yy_scan_bytes(str,len,yyscaner);
    ret = sql_tokenizer_internal(this, yyscaner);
    yy_delete_buffer(state,yyscaner);
    yylex_destroy(yyscaner);

    return ret;
}

